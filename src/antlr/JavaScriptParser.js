// Generated from .\JavaScriptParser.g4 by ANTLR 4.5.3
// jshint ignore: start
var antlr4 = require('antlr4/index');
var JavaScriptParserListener = require('./JavaScriptParserListener').JavaScriptParserListener;
var JavaScriptParserVisitor = require('./JavaScriptParserVisitor').JavaScriptParserVisitor;

var JavaScriptBaseParser = require('./JavaScriptBaseParser').JavaScriptBaseParser;

var grammarFileName = "JavaScriptParser.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003p\u0311\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0003\u0002\u0005\u0002",
    "~\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0005\u0003\u0083\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u0098\n\u0004\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u009c\n\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0006\u0006",
    "\u00a1\n\u0006\r\u0006\u000e\u0006\u00a2\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0007\b\u00ac\n\b\f\b\u000e",
    "\b\u00af\u000b\b\u0003\t\u0003\t\u0003\t\u0005\t\u00b4\n\t\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u00ba\n\n\u0003\u000b\u0003\u000b\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u00c9\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u00dc\n\u000e\u0003\u000e\u0003\u000e",
    "\u0005\u000e\u00e0\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u00e4",
    "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u00ee\n\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u00f2\n\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u00fd\n\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u010a\n\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0110\n\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0117",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u011e\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0005\u0012\u0125\n\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u0137\n\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u013b\n\u0015\u0005\u0015\u013d\n\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0016\u0006\u0016\u0142\n\u0016\r\u0016\u000e\u0016",
    "\u0143\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u014a",
    "\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u014f\n\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u015e\n\u001b\u0003\u001b\u0005\u001b\u0161",
    "\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u0173\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0005!\u0180\n!\u0003",
    "!\u0003!\u0007!\u0184\n!\f!\u000e!\u0187\u000b!\u0003!\u0003!\u0003",
    "\"\u0003\"\u0003\"\u0005\"\u018e\n\"\u0003\"\u0003\"\u0005\"\u0192\n",
    "\"\u0003#\u0003#\u0003#\u0005#\u0197\n#\u0003#\u0003#\u0003#\u0003#",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0005#\u01a8\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005",
    "#\u01b0\n#\u0003$\u0005$\u01b3\n$\u0003$\u0003$\u0003$\u0005$\u01b8",
    "\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0007%\u01c2",
    "\n%\f%\u000e%\u01c5\u000b%\u0003%\u0003%\u0005%\u01c9\n%\u0003%\u0003",
    "%\u0003%\u0005%\u01ce\n%\u0003&\u0003&\u0003&\u0005&\u01d3\n&\u0003",
    "\'\u0003\'\u0003\'\u0003(\u0005(\u01d9\n(\u0003)\u0006)\u01dc\n)\r)",
    "\u000e)\u01dd\u0003*\u0003*\u0007*\u01e2\n*\f*\u000e*\u01e5\u000b*\u0003",
    "*\u0005*\u01e8\n*\u0003*\u0007*\u01eb\n*\f*\u000e*\u01ee\u000b*\u0003",
    "*\u0003*\u0003+\u0003+\u0006+\u01f4\n+\r+\u000e+\u01f5\u0003+\u0007",
    "+\u01f9\n+\f+\u000e+\u01fc\u000b+\u0003+\u0006+\u01ff\n+\r+\u000e+\u0200",
    "\u0003+\u0005+\u0204\n+\u0003+\u0005+\u0207\n+\u0003,\u0003,\u0003,",
    "\u0003-\u0003-\u0003-\u0003-\u0007-\u0210\n-\f-\u000e-\u0213\u000b-",
    "\u0005-\u0215\n-\u0003-\u0005-\u0218\n-\u0003-\u0003-\u0003.\u0003.",
    "\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0237\n.\u0003/\u0003/\u0003",
    "/\u0005/\u023c\n/\u00030\u00030\u00030\u00030\u00070\u0242\n0\f0\u000e",
    "0\u0245\u000b0\u00030\u00030\u00050\u0249\n0\u00030\u00050\u024c\n0",
    "\u00030\u00030\u00031\u00031\u00031\u00032\u00032\u00032\u00072\u0256",
    "\n2\f2\u000e2\u0259\u000b2\u00033\u00033\u00033\u00053\u025e\n3\u0003",
    "3\u00033\u00053\u0262\n3\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00053\u026b\n3\u00033\u00033\u00033\u00033\u00053\u0271\n3\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00053\u0293\n3\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00073\u02d8\n3\f3\u000e3\u02db\u000b3\u00034\u00034\u00034\u0005",
    "4\u02e0\n4\u00034\u00054\u02e3\n4\u00035\u00035\u00035\u00035\u0003",
    "5\u00055\u02ea\n5\u00036\u00036\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00057\u02f4\n7\u00038\u00038\u00039\u00039\u00059\u02fa\n9\u0003",
    ":\u0003:\u0003:\u0005:\u02ff\n:\u0003;\u0003;\u0003<\u0003<\u0003<\u0003",
    "<\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0005>\u030f",
    "\n>\u0003>\u0002\u0003d?\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz\u0002\f\u0005\u0002FF]]aa\u0004\u0002\u000e\u000e\u0010",
    "\u0010\u0003\u0002\u0019\u001b\u0003\u0002\u0015\u0016\u0003\u0002\u001c",
    "\u001e\u0003\u0002\u001f\"\u0003\u0002#&\u0003\u0002,6\u0003\u0002:",
    ">\u0003\u0002?h\u036a\u0002}\u0003\u0002\u0002\u0002\u0004\u0082\u0003",
    "\u0002\u0002\u0002\u0006\u0097\u0003\u0002\u0002\u0002\b\u0099\u0003",
    "\u0002\u0002\u0002\n\u00a0\u0003\u0002\u0002\u0002\f\u00a4\u0003\u0002",
    "\u0002\u0002\u000e\u00a8\u0003\u0002\u0002\u0002\u0010\u00b0\u0003\u0002",
    "\u0002\u0002\u0012\u00b9\u0003\u0002\u0002\u0002\u0014\u00bb\u0003\u0002",
    "\u0002\u0002\u0016\u00bd\u0003\u0002\u0002\u0002\u0018\u00c1\u0003\u0002",
    "\u0002\u0002\u001a\u010f\u0003\u0002\u0002\u0002\u001c\u0111\u0003\u0002",
    "\u0002\u0002\u001e\u0113\u0003\u0002\u0002\u0002 \u011a\u0003\u0002",
    "\u0002\u0002\"\u0121\u0003\u0002\u0002\u0002$\u0128\u0003\u0002\u0002",
    "\u0002&\u012e\u0003\u0002\u0002\u0002(\u0134\u0003\u0002\u0002\u0002",
    "*\u0141\u0003\u0002\u0002\u0002,\u0145\u0003\u0002\u0002\u0002.\u014b",
    "\u0003\u0002\u0002\u00020\u0150\u0003\u0002\u0002\u00022\u0154\u0003",
    "\u0002\u0002\u00024\u0159\u0003\u0002\u0002\u00026\u0162\u0003\u0002",
    "\u0002\u00028\u0168\u0003\u0002\u0002\u0002:\u016b\u0003\u0002\u0002",
    "\u0002<\u016e\u0003\u0002\u0002\u0002>\u0179\u0003\u0002\u0002\u0002",
    "@\u017f\u0003\u0002\u0002\u0002B\u0191\u0003\u0002\u0002\u0002D\u01af",
    "\u0003\u0002\u0002\u0002F\u01b2\u0003\u0002\u0002\u0002H\u01cd\u0003",
    "\u0002\u0002\u0002J\u01cf\u0003\u0002\u0002\u0002L\u01d4\u0003\u0002",
    "\u0002\u0002N\u01d8\u0003\u0002\u0002\u0002P\u01db\u0003\u0002\u0002",
    "\u0002R\u01df\u0003\u0002\u0002\u0002T\u0206\u0003\u0002\u0002\u0002",
    "V\u0208\u0003\u0002\u0002\u0002X\u020b\u0003\u0002\u0002\u0002Z\u0236",
    "\u0003\u0002\u0002\u0002\\\u023b\u0003\u0002\u0002\u0002^\u023d\u0003",
    "\u0002\u0002\u0002`\u024f\u0003\u0002\u0002\u0002b\u0252\u0003\u0002",
    "\u0002\u0002d\u0292\u0003\u0002\u0002\u0002f\u02e2\u0003\u0002\u0002",
    "\u0002h\u02e9\u0003\u0002\u0002\u0002j\u02eb\u0003\u0002\u0002\u0002",
    "l\u02f3\u0003\u0002\u0002\u0002n\u02f5\u0003\u0002\u0002\u0002p\u02f9",
    "\u0003\u0002\u0002\u0002r\u02fe\u0003\u0002\u0002\u0002t\u0300\u0003",
    "\u0002\u0002\u0002v\u0302\u0003\u0002\u0002\u0002x\u0306\u0003\u0002",
    "\u0002\u0002z\u030e\u0003\u0002\u0002\u0002|~\u0005P)\u0002}|\u0003",
    "\u0002\u0002\u0002}~\u0003\u0002\u0002\u0002~\u007f\u0003\u0002\u0002",
    "\u0002\u007f\u0080\u0007\u0002\u0002\u0003\u0080\u0003\u0003\u0002\u0002",
    "\u0002\u0081\u0083\u0007^\u0002\u0002\u0082\u0081\u0003\u0002\u0002",
    "\u0002\u0082\u0083\u0003\u0002\u0002\u0002\u0083\u0084\u0003\u0002\u0002",
    "\u0002\u0084\u0085\u0005\u0006\u0004\u0002\u0085\u0005\u0003\u0002\u0002",
    "\u0002\u0086\u0098\u0005\b\u0005\u0002\u0087\u0098\u0005\f\u0007\u0002",
    "\u0088\u0098\u0005\u0014\u000b\u0002\u0089\u0098\u0005> \u0002\u008a",
    "\u0098\u0005\u0016\f\u0002\u008b\u0098\u0005\u0018\r\u0002\u008c\u0098",
    "\u0005\u001a\u000e\u0002\u008d\u0098\u0005\u001e\u0010\u0002\u008e\u0098",
    "\u0005 \u0011\u0002\u008f\u0098\u0005\"\u0012\u0002\u0090\u0098\u0005",
    "$\u0013\u0002\u0091\u0098\u00050\u0019\u0002\u0092\u0098\u0005&\u0014",
    "\u0002\u0093\u0098\u00052\u001a\u0002\u0094\u0098\u00054\u001b\u0002",
    "\u0095\u0098\u0005:\u001e\u0002\u0096\u0098\u0005<\u001f\u0002\u0097",
    "\u0086\u0003\u0002\u0002\u0002\u0097\u0087\u0003\u0002\u0002\u0002\u0097",
    "\u0088\u0003\u0002\u0002\u0002\u0097\u0089\u0003\u0002\u0002\u0002\u0097",
    "\u008a\u0003\u0002\u0002\u0002\u0097\u008b\u0003\u0002\u0002\u0002\u0097",
    "\u008c\u0003\u0002\u0002\u0002\u0097\u008d\u0003\u0002\u0002\u0002\u0097",
    "\u008e\u0003\u0002\u0002\u0002\u0097\u008f\u0003\u0002\u0002\u0002\u0097",
    "\u0090\u0003\u0002\u0002\u0002\u0097\u0091\u0003\u0002\u0002\u0002\u0097",
    "\u0092\u0003\u0002\u0002\u0002\u0097\u0093\u0003\u0002\u0002\u0002\u0097",
    "\u0094\u0003\u0002\u0002\u0002\u0097\u0095\u0003\u0002\u0002\u0002\u0097",
    "\u0096\u0003\u0002\u0002\u0002\u0098\u0007\u0003\u0002\u0002\u0002\u0099",
    "\u009b\u0007\n\u0002\u0002\u009a\u009c\u0005\n\u0006\u0002\u009b\u009a",
    "\u0003\u0002\u0002\u0002\u009b\u009c\u0003\u0002\u0002\u0002\u009c\u009d",
    "\u0003\u0002\u0002\u0002\u009d\u009e\u0007\u000b\u0002\u0002\u009e\t",
    "\u0003\u0002\u0002\u0002\u009f\u00a1\u0005\u0006\u0004\u0002\u00a0\u009f",
    "\u0003\u0002\u0002\u0002\u00a1\u00a2\u0003\u0002\u0002\u0002\u00a2\u00a0",
    "\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002\u0002\u0002\u00a3\u000b",
    "\u0003\u0002\u0002\u0002\u00a4\u00a5\u0005\u001c\u000f\u0002\u00a5\u00a6",
    "\u0005\u000e\b\u0002\u00a6\u00a7\u0005z>\u0002\u00a7\r\u0003\u0002\u0002",
    "\u0002\u00a8\u00ad\u0005\u0010\t\u0002\u00a9\u00aa\u0007\r\u0002\u0002",
    "\u00aa\u00ac\u0005\u0010\t\u0002\u00ab\u00a9\u0003\u0002\u0002\u0002",
    "\u00ac\u00af\u0003\u0002\u0002\u0002\u00ad\u00ab\u0003\u0002\u0002\u0002",
    "\u00ad\u00ae\u0003\u0002\u0002\u0002\u00ae\u000f\u0003\u0002\u0002\u0002",
    "\u00af\u00ad\u0003\u0002\u0002\u0002\u00b0\u00b3\u0005\u0012\n\u0002",
    "\u00b1\u00b2\u0007\u000e\u0002\u0002\u00b2\u00b4\u0005d3\u0002\u00b3",
    "\u00b1\u0003\u0002\u0002\u0002\u00b3\u00b4\u0003\u0002\u0002\u0002\u00b4",
    "\u0011\u0003\u0002\u0002\u0002\u00b5\u00ba\u0007i\u0002\u0002\u00b6",
    "\u00ba\u0005R*\u0002\u00b7\u00ba\u0005X-\u0002\u00b8\u00ba\u0005p9\u0002",
    "\u00b9\u00b5\u0003\u0002\u0002\u0002\u00b9\u00b6\u0003\u0002\u0002\u0002",
    "\u00b9\u00b7\u0003\u0002\u0002\u0002\u00b9\u00b8\u0003\u0002\u0002\u0002",
    "\u00ba\u0013\u0003\u0002\u0002\u0002\u00bb\u00bc\u0007\f\u0002\u0002",
    "\u00bc\u0015\u0003\u0002\u0002\u0002\u00bd\u00be\u0006\f\u0002\u0002",
    "\u00be\u00bf\u0005b2\u0002\u00bf\u00c0\u0005z>\u0002\u00c0\u0017\u0003",
    "\u0002\u0002\u0002\u00c1\u00c2\u0007T\u0002\u0002\u00c2\u00c3\u0007",
    "\b\u0002\u0002\u00c3\u00c4\u0005b2\u0002\u00c4\u00c5\u0007\t\u0002\u0002",
    "\u00c5\u00c8\u0005\u0006\u0004\u0002\u00c6\u00c7\u0007D\u0002\u0002",
    "\u00c7\u00c9\u0005\u0006\u0004\u0002\u00c8\u00c6\u0003\u0002\u0002\u0002",
    "\u00c8\u00c9\u0003\u0002\u0002\u0002\u00c9\u0019\u0003\u0002\u0002\u0002",
    "\u00ca\u00cb\u0007@\u0002\u0002\u00cb\u00cc\u0005\u0006\u0004\u0002",
    "\u00cc\u00cd\u0007N\u0002\u0002\u00cd\u00ce\u0007\b\u0002\u0002\u00ce",
    "\u00cf\u0005b2\u0002\u00cf\u00d0\u0007\t\u0002\u0002\u00d0\u00d1\u0005",
    "z>\u0002\u00d1\u0110\u0003\u0002\u0002\u0002\u00d2\u00d3\u0007N\u0002",
    "\u0002\u00d3\u00d4\u0007\b\u0002\u0002\u00d4\u00d5\u0005b2\u0002\u00d5",
    "\u00d6\u0007\t\u0002\u0002\u00d6\u00d7\u0005\u0006\u0004\u0002\u00d7",
    "\u0110\u0003\u0002\u0002\u0002\u00d8\u00d9\u0007L\u0002\u0002\u00d9",
    "\u00db\u0007\b\u0002\u0002\u00da\u00dc\u0005b2\u0002\u00db\u00da\u0003",
    "\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u00dd\u0003",
    "\u0002\u0002\u0002\u00dd\u00df\u0007\f\u0002\u0002\u00de\u00e0\u0005",
    "b2\u0002\u00df\u00de\u0003\u0002\u0002\u0002\u00df\u00e0\u0003\u0002",
    "\u0002\u0002\u00e0\u00e1\u0003\u0002\u0002\u0002\u00e1\u00e3\u0007\f",
    "\u0002\u0002\u00e2\u00e4\u0005b2\u0002\u00e3\u00e2\u0003\u0002\u0002",
    "\u0002\u00e3\u00e4\u0003\u0002\u0002\u0002\u00e4\u00e5\u0003\u0002\u0002",
    "\u0002\u00e5\u00e6\u0007\t\u0002\u0002\u00e6\u0110\u0005\u0006\u0004",
    "\u0002\u00e7\u00e8\u0007L\u0002\u0002\u00e8\u00e9\u0007\b\u0002\u0002",
    "\u00e9\u00ea\u0005\u001c\u000f\u0002\u00ea\u00eb\u0005\u000e\b\u0002",
    "\u00eb\u00ed\u0007\f\u0002\u0002\u00ec\u00ee\u0005b2\u0002\u00ed\u00ec",
    "\u0003\u0002\u0002\u0002\u00ed\u00ee\u0003\u0002\u0002\u0002\u00ee\u00ef",
    "\u0003\u0002\u0002\u0002\u00ef\u00f1\u0007\f\u0002\u0002\u00f0\u00f2",
    "\u0005b2\u0002\u00f1\u00f0\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003",
    "\u0002\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f4\u0007",
    "\t\u0002\u0002\u00f4\u00f5\u0005\u0006\u0004\u0002\u00f5\u0110\u0003",
    "\u0002\u0002\u0002\u00f6\u00f7\u0007L\u0002\u0002\u00f7\u00f8\u0007",
    "\b\u0002\u0002\u00f8\u00fc\u0005d3\u0002\u00f9\u00fd\u0007W\u0002\u0002",
    "\u00fa\u00fb\u0007i\u0002\u0002\u00fb\u00fd\u0006\u000e\u0003\u0002",
    "\u00fc\u00f9\u0003\u0002\u0002\u0002\u00fc\u00fa\u0003\u0002\u0002\u0002",
    "\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u00ff\u0005b2\u0002\u00ff",
    "\u0100\u0007\t\u0002\u0002\u0100\u0101\u0005\u0006\u0004\u0002\u0101",
    "\u0110\u0003\u0002\u0002\u0002\u0102\u0103\u0007L\u0002\u0002\u0103",
    "\u0104\u0007\b\u0002\u0002\u0104\u0105\u0005\u001c\u000f\u0002\u0105",
    "\u0109\u0005\u0010\t\u0002\u0106\u010a\u0007W\u0002\u0002\u0107\u0108",
    "\u0007i\u0002\u0002\u0108\u010a\u0006\u000e\u0004\u0002\u0109\u0106",
    "\u0003\u0002\u0002\u0002\u0109\u0107\u0003\u0002\u0002\u0002\u010a\u010b",
    "\u0003\u0002\u0002\u0002\u010b\u010c\u0005b2\u0002\u010c\u010d\u0007",
    "\t\u0002\u0002\u010d\u010e\u0005\u0006\u0004\u0002\u010e\u0110\u0003",
    "\u0002\u0002\u0002\u010f\u00ca\u0003\u0002\u0002\u0002\u010f\u00d2\u0003",
    "\u0002\u0002\u0002\u010f\u00d8\u0003\u0002\u0002\u0002\u010f\u00e7\u0003",
    "\u0002\u0002\u0002\u010f\u00f6\u0003\u0002\u0002\u0002\u010f\u0102\u0003",
    "\u0002\u0002\u0002\u0110\u001b\u0003\u0002\u0002\u0002\u0111\u0112\t",
    "\u0002\u0002\u0002\u0112\u001d\u0003\u0002\u0002\u0002\u0113\u0116\u0007",
    "K\u0002\u0002\u0114\u0115\u0006\u0010\u0005\u0002\u0115\u0117\u0007",
    "i\u0002\u0002\u0116\u0114\u0003\u0002\u0002\u0002\u0116\u0117\u0003",
    "\u0002\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u0119\u0005",
    "z>\u0002\u0119\u001f\u0003\u0002\u0002\u0002\u011a\u011d\u0007?\u0002",
    "\u0002\u011b\u011c\u0006\u0011\u0006\u0002\u011c\u011e\u0007i\u0002",
    "\u0002\u011d\u011b\u0003\u0002\u0002\u0002\u011d\u011e\u0003\u0002\u0002",
    "\u0002\u011e\u011f\u0003\u0002\u0002\u0002\u011f\u0120\u0005z>\u0002",
    "\u0120!\u0003\u0002\u0002\u0002\u0121\u0124\u0007I\u0002\u0002\u0122",
    "\u0123\u0006\u0012\u0007\u0002\u0123\u0125\u0005b2\u0002\u0124\u0122",
    "\u0003\u0002\u0002\u0002\u0124\u0125\u0003\u0002\u0002\u0002\u0125\u0126",
    "\u0003\u0002\u0002\u0002\u0126\u0127\u0005z>\u0002\u0127#\u0003\u0002",
    "\u0002\u0002\u0128\u0129\u0007R\u0002\u0002\u0129\u012a\u0007\b\u0002",
    "\u0002\u012a\u012b\u0005b2\u0002\u012b\u012c\u0007\t\u0002\u0002\u012c",
    "\u012d\u0005\u0006\u0004\u0002\u012d%\u0003\u0002\u0002\u0002\u012e",
    "\u012f\u0007M\u0002\u0002\u012f\u0130\u0007\b\u0002\u0002\u0130\u0131",
    "\u0005b2\u0002\u0131\u0132\u0007\t\u0002\u0002\u0132\u0133\u0005(\u0015",
    "\u0002\u0133\'\u0003\u0002\u0002\u0002\u0134\u0136\u0007\n\u0002\u0002",
    "\u0135\u0137\u0005*\u0016\u0002\u0136\u0135\u0003\u0002\u0002\u0002",
    "\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u013c\u0003\u0002\u0002\u0002",
    "\u0138\u013a\u0005.\u0018\u0002\u0139\u013b\u0005*\u0016\u0002\u013a",
    "\u0139\u0003\u0002\u0002\u0002\u013a\u013b\u0003\u0002\u0002\u0002\u013b",
    "\u013d\u0003\u0002\u0002\u0002\u013c\u0138\u0003\u0002\u0002\u0002\u013c",
    "\u013d\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002\u0002\u0002\u013e",
    "\u013f\u0007\u000b\u0002\u0002\u013f)\u0003\u0002\u0002\u0002\u0140",
    "\u0142\u0005,\u0017\u0002\u0141\u0140\u0003\u0002\u0002\u0002\u0142",
    "\u0143\u0003\u0002\u0002\u0002\u0143\u0141\u0003\u0002\u0002\u0002\u0143",
    "\u0144\u0003\u0002\u0002\u0002\u0144+\u0003\u0002\u0002\u0002\u0145",
    "\u0146\u0007C\u0002\u0002\u0146\u0147\u0005b2\u0002\u0147\u0149\u0007",
    "\u0010\u0002\u0002\u0148\u014a\u0005\n\u0006\u0002\u0149\u0148\u0003",
    "\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a-\u0003",
    "\u0002\u0002\u0002\u014b\u014c\u0007S\u0002\u0002\u014c\u014e\u0007",
    "\u0010\u0002\u0002\u014d\u014f\u0005\n\u0006\u0002\u014e\u014d\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f/\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u0007i\u0002\u0002\u0151\u0152\u0007",
    "\u0010\u0002\u0002\u0152\u0153\u0005\u0006\u0004\u0002\u01531\u0003",
    "\u0002\u0002\u0002\u0154\u0155\u0007U\u0002\u0002\u0155\u0156\u0006",
    "\u001a\b\u0002\u0156\u0157\u0005b2\u0002\u0157\u0158\u0005z>\u0002\u0158",
    "3\u0003\u0002\u0002\u0002\u0159\u015a\u0007X\u0002\u0002\u015a\u0160",
    "\u0005\b\u0005\u0002\u015b\u015d\u00056\u001c\u0002\u015c\u015e\u0005",
    "8\u001d\u0002\u015d\u015c\u0003\u0002\u0002\u0002\u015d\u015e\u0003",
    "\u0002\u0002\u0002\u015e\u0161\u0003\u0002\u0002\u0002\u015f\u0161\u0005",
    "8\u001d\u0002\u0160\u015b\u0003\u0002\u0002\u0002\u0160\u015f\u0003",
    "\u0002\u0002\u0002\u01615\u0003\u0002\u0002\u0002\u0162\u0163\u0007",
    "G\u0002\u0002\u0163\u0164\u0007\b\u0002\u0002\u0164\u0165\u0007i\u0002",
    "\u0002\u0165\u0166\u0007\t\u0002\u0002\u0166\u0167\u0005\b\u0005\u0002",
    "\u01677\u0003\u0002\u0002\u0002\u0168\u0169\u0007H\u0002\u0002\u0169",
    "\u016a\u0005\b\u0005\u0002\u016a9\u0003\u0002\u0002\u0002\u016b\u016c",
    "\u0007O\u0002\u0002\u016c\u016d\u0005z>\u0002\u016d;\u0003\u0002\u0002",
    "\u0002\u016e\u016f\u0007P\u0002\u0002\u016f\u0170\u0007i\u0002\u0002",
    "\u0170\u0172\u0007\b\u0002\u0002\u0171\u0173\u0005H%\u0002\u0172\u0171",
    "\u0003\u0002\u0002\u0002\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0174",
    "\u0003\u0002\u0002\u0002\u0174\u0175\u0007\t\u0002\u0002\u0175\u0176",
    "\u0007\n\u0002\u0002\u0176\u0177\u0005N(\u0002\u0177\u0178\u0007\u000b",
    "\u0002\u0002\u0178=\u0003\u0002\u0002\u0002\u0179\u017a\u0007Y\u0002",
    "\u0002\u017a\u017b\u0007i\u0002\u0002\u017b\u017c\u0005@!\u0002\u017c",
    "?\u0003\u0002\u0002\u0002\u017d\u017e\u0007[\u0002\u0002\u017e\u0180",
    "\u0005d3\u0002\u017f\u017d\u0003\u0002\u0002\u0002\u017f\u0180\u0003",
    "\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0185\u0007",
    "\n\u0002\u0002\u0182\u0184\u0005B\"\u0002\u0183\u0182\u0003\u0002\u0002",
    "\u0002\u0184\u0187\u0003\u0002\u0002\u0002\u0185\u0183\u0003\u0002\u0002",
    "\u0002\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0188\u0003\u0002\u0002",
    "\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0188\u0189\u0007\u000b\u0002",
    "\u0002\u0189A\u0003\u0002\u0002\u0002\u018a\u018e\u0007g\u0002\u0002",
    "\u018b\u018c\u0006\"\t\u0002\u018c\u018e\u0007i\u0002\u0002\u018d\u018a",
    "\u0003\u0002\u0002\u0002\u018d\u018b\u0003\u0002\u0002\u0002\u018d\u018e",
    "\u0003\u0002\u0002\u0002\u018e\u018f\u0003\u0002\u0002\u0002\u018f\u0192",
    "\u0005D#\u0002\u0190\u0192\u0005\u0014\u000b\u0002\u0191\u018d\u0003",
    "\u0002\u0002\u0002\u0191\u0190\u0003\u0002\u0002\u0002\u0192C\u0003",
    "\u0002\u0002\u0002\u0193\u0194\u0005\\/\u0002\u0194\u0196\u0007\b\u0002",
    "\u0002\u0195\u0197\u0005H%\u0002\u0196\u0195\u0003\u0002\u0002\u0002",
    "\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002",
    "\u0198\u0199\u0007\t\u0002\u0002\u0199\u019a\u0007\n\u0002\u0002\u019a",
    "\u019b\u0005N(\u0002\u019b\u019c\u0007\u000b\u0002\u0002\u019c\u01b0",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u0005v<\u0002\u019e\u019f\u0007",
    "\b\u0002\u0002\u019f\u01a0\u0007\t\u0002\u0002\u01a0\u01a1\u0007\n\u0002",
    "\u0002\u01a1\u01a2\u0005N(\u0002\u01a2\u01a3\u0007\u000b\u0002\u0002",
    "\u01a3\u01b0\u0003\u0002\u0002\u0002\u01a4\u01a5\u0005x=\u0002\u01a5",
    "\u01a7\u0007\b\u0002\u0002\u01a6\u01a8\u0005H%\u0002\u01a7\u01a6\u0003",
    "\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003",
    "\u0002\u0002\u0002\u01a9\u01aa\u0007\t\u0002\u0002\u01aa\u01ab\u0007",
    "\n\u0002\u0002\u01ab\u01ac\u0005N(\u0002\u01ac\u01ad\u0007\u000b\u0002",
    "\u0002\u01ad\u01b0\u0003\u0002\u0002\u0002\u01ae\u01b0\u0005F$\u0002",
    "\u01af\u0193\u0003\u0002\u0002\u0002\u01af\u019d\u0003\u0002\u0002\u0002",
    "\u01af\u01a4\u0003\u0002\u0002\u0002\u01af\u01ae\u0003\u0002\u0002\u0002",
    "\u01b0E\u0003\u0002\u0002\u0002\u01b1\u01b3\u0007\u0019\u0002\u0002",
    "\u01b2\u01b1\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002",
    "\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4\u01b5\u0007i\u0002\u0002",
    "\u01b5\u01b7\u0007\b\u0002\u0002\u01b6\u01b8\u0005H%\u0002\u01b7\u01b6",
    "\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01b9",
    "\u0003\u0002\u0002\u0002\u01b9\u01ba\u0007\t\u0002\u0002\u01ba\u01bb",
    "\u0007\n\u0002\u0002\u01bb\u01bc\u0005N(\u0002\u01bc\u01bd\u0007\u000b",
    "\u0002\u0002\u01bdG\u0003\u0002\u0002\u0002\u01be\u01c3\u0005J&\u0002",
    "\u01bf\u01c0\u0007\r\u0002\u0002\u01c0\u01c2\u0005J&\u0002\u01c1\u01bf",
    "\u0003\u0002\u0002\u0002\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3\u01c1",
    "\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c8",
    "\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c6\u01c7",
    "\u0007\r\u0002\u0002\u01c7\u01c9\u0005L\'\u0002\u01c8\u01c6\u0003\u0002",
    "\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9\u01ce\u0003\u0002",
    "\u0002\u0002\u01ca\u01ce\u0005L\'\u0002\u01cb\u01ce\u0005R*\u0002\u01cc",
    "\u01ce\u0005X-\u0002\u01cd\u01be\u0003\u0002\u0002\u0002\u01cd\u01ca",
    "\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002\u0002\u0002\u01cd\u01cc",
    "\u0003\u0002\u0002\u0002\u01ceI\u0003\u0002\u0002\u0002\u01cf\u01d2",
    "\u0007i\u0002\u0002\u01d0\u01d1\u0007\u000e\u0002\u0002\u01d1\u01d3",
    "\u0005d3\u0002\u01d2\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003",
    "\u0002\u0002\u0002\u01d3K\u0003\u0002\u0002\u0002\u01d4\u01d5\u0007",
    "\u0011\u0002\u0002\u01d5\u01d6\u0007i\u0002\u0002\u01d6M\u0003\u0002",
    "\u0002\u0002\u01d7\u01d9\u0005P)\u0002\u01d8\u01d7\u0003\u0002\u0002",
    "\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9O\u0003\u0002\u0002",
    "\u0002\u01da\u01dc\u0005\u0004\u0003\u0002\u01db\u01da\u0003\u0002\u0002",
    "\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01db\u0003\u0002\u0002",
    "\u0002\u01dd\u01de\u0003\u0002\u0002\u0002\u01deQ\u0003\u0002\u0002",
    "\u0002\u01df\u01e3\u0007\u0006\u0002\u0002\u01e0\u01e2\u0007\r\u0002",
    "\u0002\u01e1\u01e0\u0003\u0002\u0002\u0002\u01e2\u01e5\u0003\u0002\u0002",
    "\u0002\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002",
    "\u0002\u01e4\u01e7\u0003\u0002\u0002\u0002\u01e5\u01e3\u0003\u0002\u0002",
    "\u0002\u01e6\u01e8\u0005T+\u0002\u01e7\u01e6\u0003\u0002\u0002\u0002",
    "\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01ec\u0003\u0002\u0002\u0002",
    "\u01e9\u01eb\u0007\r\u0002\u0002\u01ea\u01e9\u0003\u0002\u0002\u0002",
    "\u01eb\u01ee\u0003\u0002\u0002\u0002\u01ec\u01ea\u0003\u0002\u0002\u0002",
    "\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ef\u0003\u0002\u0002\u0002",
    "\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ef\u01f0\u0007\u0007\u0002\u0002",
    "\u01f0S\u0003\u0002\u0002\u0002\u01f1\u01fa\u0005d3\u0002\u01f2\u01f4",
    "\u0007\r\u0002\u0002\u01f3\u01f2\u0003\u0002\u0002\u0002\u01f4\u01f5",
    "\u0003\u0002\u0002\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002\u01f5\u01f6",
    "\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f9",
    "\u0005d3\u0002\u01f8\u01f3\u0003\u0002\u0002\u0002\u01f9\u01fc\u0003",
    "\u0002\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003",
    "\u0002\u0002\u0002\u01fb\u0203\u0003\u0002\u0002\u0002\u01fc\u01fa\u0003",
    "\u0002\u0002\u0002\u01fd\u01ff\u0007\r\u0002\u0002\u01fe\u01fd\u0003",
    "\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u01fe\u0003",
    "\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201\u0202\u0003",
    "\u0002\u0002\u0002\u0202\u0204\u0005V,\u0002\u0203\u01fe\u0003\u0002",
    "\u0002\u0002\u0203\u0204\u0003\u0002\u0002\u0002\u0204\u0207\u0003\u0002",
    "\u0002\u0002\u0205\u0207\u0005V,\u0002\u0206\u01f1\u0003\u0002\u0002",
    "\u0002\u0206\u0205\u0003\u0002\u0002\u0002\u0207U\u0003\u0002\u0002",
    "\u0002\u0208\u0209\u0007\u0011\u0002\u0002\u0209\u020a\u0007i\u0002",
    "\u0002\u020aW\u0003\u0002\u0002\u0002\u020b\u0214\u0007\n\u0002\u0002",
    "\u020c\u0211\u0005Z.\u0002\u020d\u020e\u0007\r\u0002\u0002\u020e\u0210",
    "\u0005Z.\u0002\u020f\u020d\u0003\u0002\u0002\u0002\u0210\u0213\u0003",
    "\u0002\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0211\u0212\u0003",
    "\u0002\u0002\u0002\u0212\u0215\u0003\u0002\u0002\u0002\u0213\u0211\u0003",
    "\u0002\u0002\u0002\u0214\u020c\u0003\u0002\u0002\u0002\u0214\u0215\u0003",
    "\u0002\u0002\u0002\u0215\u0217\u0003\u0002\u0002\u0002\u0216\u0218\u0007",
    "\r\u0002\u0002\u0217\u0216\u0003\u0002\u0002\u0002\u0217\u0218\u0003",
    "\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a\u0007",
    "\u000b\u0002\u0002\u021aY\u0003\u0002\u0002\u0002\u021b\u021c\u0005",
    "\\/\u0002\u021c\u021d\t\u0003\u0002\u0002\u021d\u021e\u0005d3\u0002",
    "\u021e\u0237\u0003\u0002\u0002\u0002\u021f\u0220\u0007\u0006\u0002\u0002",
    "\u0220\u0221\u0005d3\u0002\u0221\u0222\u0007\u0007\u0002\u0002\u0222",
    "\u0223\u0007\u0010\u0002\u0002\u0223\u0224\u0005d3\u0002\u0224\u0237",
    "\u0003\u0002\u0002\u0002\u0225\u0226\u0005v<\u0002\u0226\u0227\u0007",
    "\b\u0002\u0002\u0227\u0228\u0007\t\u0002\u0002\u0228\u0229\u0007\n\u0002",
    "\u0002\u0229\u022a\u0005N(\u0002\u022a\u022b\u0007\u000b\u0002\u0002",
    "\u022b\u0237\u0003\u0002\u0002\u0002\u022c\u022d\u0005x=\u0002\u022d",
    "\u022e\u0007\b\u0002\u0002\u022e\u022f\u0007i\u0002\u0002\u022f\u0230",
    "\u0007\t\u0002\u0002\u0230\u0231\u0007\n\u0002\u0002\u0231\u0232\u0005",
    "N(\u0002\u0232\u0233\u0007\u000b\u0002\u0002\u0233\u0237\u0003\u0002",
    "\u0002\u0002\u0234\u0237\u0005F$\u0002\u0235\u0237\u0007i\u0002\u0002",
    "\u0236\u021b\u0003\u0002\u0002\u0002\u0236\u021f\u0003\u0002\u0002\u0002",
    "\u0236\u0225\u0003\u0002\u0002\u0002\u0236\u022c\u0003\u0002\u0002\u0002",
    "\u0236\u0234\u0003\u0002\u0002\u0002\u0236\u0235\u0003\u0002\u0002\u0002",
    "\u0237[\u0003\u0002\u0002\u0002\u0238\u023c\u0005p9\u0002\u0239\u023c",
    "\u0007j\u0002\u0002\u023a\u023c\u0005n8\u0002\u023b\u0238\u0003\u0002",
    "\u0002\u0002\u023b\u0239\u0003\u0002\u0002\u0002\u023b\u023a\u0003\u0002",
    "\u0002\u0002\u023c]\u0003\u0002\u0002\u0002\u023d\u024b\u0007\b\u0002",
    "\u0002\u023e\u0243\u0005d3\u0002\u023f\u0240\u0007\r\u0002\u0002\u0240",
    "\u0242\u0005d3\u0002\u0241\u023f\u0003\u0002\u0002\u0002\u0242\u0245",
    "\u0003\u0002\u0002\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0243\u0244",
    "\u0003\u0002\u0002\u0002\u0244\u0248\u0003\u0002\u0002\u0002\u0245\u0243",
    "\u0003\u0002\u0002\u0002\u0246\u0247\u0007\r\u0002\u0002\u0247\u0249",
    "\u0005`1\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0248\u0249\u0003",
    "\u0002\u0002\u0002\u0249\u024c\u0003\u0002\u0002\u0002\u024a\u024c\u0005",
    "`1\u0002\u024b\u023e\u0003\u0002\u0002\u0002\u024b\u024a\u0003\u0002",
    "\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002",
    "\u0002\u0002\u024d\u024e\u0007\t\u0002\u0002\u024e_\u0003\u0002\u0002",
    "\u0002\u024f\u0250\u0007\u0011\u0002\u0002\u0250\u0251\u0007i\u0002",
    "\u0002\u0251a\u0003\u0002\u0002\u0002\u0252\u0257\u0005d3\u0002\u0253",
    "\u0254\u0007\r\u0002\u0002\u0254\u0256\u0005d3\u0002\u0255\u0253\u0003",
    "\u0002\u0002\u0002\u0256\u0259\u0003\u0002\u0002\u0002\u0257\u0255\u0003",
    "\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258c\u0003",
    "\u0002\u0002\u0002\u0259\u0257\u0003\u0002\u0002\u0002\u025a\u025b\b",
    "3\u0001\u0002\u025b\u025d\u0007P\u0002\u0002\u025c\u025e\u0007i\u0002",
    "\u0002\u025d\u025c\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002",
    "\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0261\u0007\b\u0002",
    "\u0002\u0260\u0262\u0005H%\u0002\u0261\u0260\u0003\u0002\u0002\u0002",
    "\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002",
    "\u0263\u0264\u0007\t\u0002\u0002\u0264\u0265\u0007\n\u0002\u0002\u0265",
    "\u0266\u0005N(\u0002\u0266\u0267\u0007\u000b\u0002\u0002\u0267\u0293",
    "\u0003\u0002\u0002\u0002\u0268\u026a\u0007Y\u0002\u0002\u0269\u026b",
    "\u0007i\u0002\u0002\u026a\u0269\u0003\u0002\u0002\u0002\u026a\u026b",
    "\u0003\u0002\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u0293",
    "\u0005@!\u0002\u026d\u026e\u0007E\u0002\u0002\u026e\u0270\u0005d3\u0002",
    "\u026f\u0271\u0005^0\u0002\u0270\u026f\u0003\u0002\u0002\u0002\u0270",
    "\u0271\u0003\u0002\u0002\u0002\u0271\u0293\u0003\u0002\u0002\u0002\u0272",
    "\u0273\u0007V\u0002\u0002\u0273\u0293\u0005d3#\u0274\u0275\u0007J\u0002",
    "\u0002\u0275\u0293\u0005d3\"\u0276\u0277\u0007B\u0002\u0002\u0277\u0293",
    "\u0005d3!\u0278\u0279\u0007\u0013\u0002\u0002\u0279\u0293\u0005d3 \u027a",
    "\u027b\u0007\u0014\u0002\u0002\u027b\u0293\u0005d3\u001f\u027c\u027d",
    "\u0007\u0015\u0002\u0002\u027d\u0293\u0005d3\u001e\u027e\u027f\u0007",
    "\u0016\u0002\u0002\u027f\u0293\u0005d3\u001d\u0280\u0281\u0007\u0017",
    "\u0002\u0002\u0281\u0293\u0005d3\u001c\u0282\u0283\u0007\u0018\u0002",
    "\u0002\u0283\u0293\u0005d3\u001b\u0284\u0293\u0007Q\u0002\u0002\u0285",
    "\u0293\u0007i\u0002\u0002\u0286\u0293\u0007\\\u0002\u0002\u0287\u0293",
    "\u0005l7\u0002\u0288\u0293\u0005R*\u0002\u0289\u0293\u0005X-\u0002\u028a",
    "\u028b\u0007\b\u0002\u0002\u028b\u028c\u0005b2\u0002\u028c\u028d\u0007",
    "\t\u0002\u0002\u028d\u0293\u0003\u0002\u0002\u0002\u028e\u028f\u0005",
    "f4\u0002\u028f\u0290\u00077\u0002\u0002\u0290\u0291\u0005h5\u0002\u0291",
    "\u0293\u0003\u0002\u0002\u0002\u0292\u025a\u0003\u0002\u0002\u0002\u0292",
    "\u0268\u0003\u0002\u0002\u0002\u0292\u026d\u0003\u0002\u0002\u0002\u0292",
    "\u0272\u0003\u0002\u0002\u0002\u0292\u0274\u0003\u0002\u0002\u0002\u0292",
    "\u0276\u0003\u0002\u0002\u0002\u0292\u0278\u0003\u0002\u0002\u0002\u0292",
    "\u027a\u0003\u0002\u0002\u0002\u0292\u027c\u0003\u0002\u0002\u0002\u0292",
    "\u027e\u0003\u0002\u0002\u0002\u0292\u0280\u0003\u0002\u0002\u0002\u0292",
    "\u0282\u0003\u0002\u0002\u0002\u0292\u0284\u0003\u0002\u0002\u0002\u0292",
    "\u0285\u0003\u0002\u0002\u0002\u0292\u0286\u0003\u0002\u0002\u0002\u0292",
    "\u0287\u0003\u0002\u0002\u0002\u0292\u0288\u0003\u0002\u0002\u0002\u0292",
    "\u0289\u0003\u0002\u0002\u0002\u0292\u028a\u0003\u0002\u0002\u0002\u0292",
    "\u028e\u0003\u0002\u0002\u0002\u0293\u02d9\u0003\u0002\u0002\u0002\u0294",
    "\u0295\f\u001a\u0002\u0002\u0295\u0296\t\u0004\u0002\u0002\u0296\u02d8",
    "\u0005d3\u001b\u0297\u0298\f\u0019\u0002\u0002\u0298\u0299\t\u0005\u0002",
    "\u0002\u0299\u02d8\u0005d3\u001a\u029a\u029b\f\u0018\u0002\u0002\u029b",
    "\u029c\t\u0006\u0002\u0002\u029c\u02d8\u0005d3\u0019\u029d\u029e\f\u0017",
    "\u0002\u0002\u029e\u029f\t\u0007\u0002\u0002\u029f\u02d8\u0005d3\u0018",
    "\u02a0\u02a1\f\u0016\u0002\u0002\u02a1\u02a2\u0007A\u0002\u0002\u02a2",
    "\u02d8\u0005d3\u0017\u02a3\u02a4\f\u0015\u0002\u0002\u02a4\u02a5\u0007",
    "W\u0002\u0002\u02a5\u02d8\u0005d3\u0016\u02a6\u02a7\f\u0014\u0002\u0002",
    "\u02a7\u02a8\t\b\u0002\u0002\u02a8\u02d8\u0005d3\u0015\u02a9\u02aa\f",
    "\u0013\u0002\u0002\u02aa\u02ab\u0007\'\u0002\u0002\u02ab\u02d8\u0005",
    "d3\u0014\u02ac\u02ad\f\u0012\u0002\u0002\u02ad\u02ae\u0007(\u0002\u0002",
    "\u02ae\u02d8\u0005d3\u0013\u02af\u02b0\f\u0011\u0002\u0002\u02b0\u02b1",
    "\u0007)\u0002\u0002\u02b1\u02d8\u0005d3\u0012\u02b2\u02b3\f\u0010\u0002",
    "\u0002\u02b3\u02b4\u0007*\u0002\u0002\u02b4\u02d8\u0005d3\u0011\u02b5",
    "\u02b6\f\u000f\u0002\u0002\u02b6\u02b7\u0007+\u0002\u0002\u02b7\u02d8",
    "\u0005d3\u0010\u02b8\u02b9\f\u000e\u0002\u0002\u02b9\u02ba\u0007\u000f",
    "\u0002\u0002\u02ba\u02bb\u0005d3\u0002\u02bb\u02bc\u0007\u0010\u0002",
    "\u0002\u02bc\u02bd\u0005d3\u000f\u02bd\u02d8\u0003\u0002\u0002\u0002",
    "\u02be\u02bf\f\r\u0002\u0002\u02bf\u02c0\u0007\u000e\u0002\u0002\u02c0",
    "\u02d8\u0005d3\u000e\u02c1\u02c2\f\f\u0002\u0002\u02c2\u02c3\u0005j",
    "6\u0002\u02c3\u02c4\u0005d3\r\u02c4\u02d8\u0003\u0002\u0002\u0002\u02c5",
    "\u02c6\f)\u0002\u0002\u02c6\u02c7\u0007\u0006\u0002\u0002\u02c7\u02c8",
    "\u0005b2\u0002\u02c8\u02c9\u0007\u0007\u0002\u0002\u02c9\u02d8\u0003",
    "\u0002\u0002\u0002\u02ca\u02cb\f(\u0002\u0002\u02cb\u02cc\u0007\u0012",
    "\u0002\u0002\u02cc\u02d8\u0005p9\u0002\u02cd\u02ce\f\'\u0002\u0002\u02ce",
    "\u02d8\u0005^0\u0002\u02cf\u02d0\f%\u0002\u0002\u02d0\u02d1\u00063\u001d",
    "\u0002\u02d1\u02d8\u0007\u0013\u0002\u0002\u02d2\u02d3\f$\u0002\u0002",
    "\u02d3\u02d4\u00063\u001f\u0002\u02d4\u02d8\u0007\u0014\u0002\u0002",
    "\u02d5\u02d6\f\u000b\u0002\u0002\u02d6\u02d8\u0007k\u0002\u0002\u02d7",
    "\u0294\u0003\u0002\u0002\u0002\u02d7\u0297\u0003\u0002\u0002\u0002\u02d7",
    "\u029a\u0003\u0002\u0002\u0002\u02d7\u029d\u0003\u0002\u0002\u0002\u02d7",
    "\u02a0\u0003\u0002\u0002\u0002\u02d7\u02a3\u0003\u0002\u0002\u0002\u02d7",
    "\u02a6\u0003\u0002\u0002\u0002\u02d7\u02a9\u0003\u0002\u0002\u0002\u02d7",
    "\u02ac\u0003\u0002\u0002\u0002\u02d7\u02af\u0003\u0002\u0002\u0002\u02d7",
    "\u02b2\u0003\u0002\u0002\u0002\u02d7\u02b5\u0003\u0002\u0002\u0002\u02d7",
    "\u02b8\u0003\u0002\u0002\u0002\u02d7\u02be\u0003\u0002\u0002\u0002\u02d7",
    "\u02c1\u0003\u0002\u0002\u0002\u02d7\u02c5\u0003\u0002\u0002\u0002\u02d7",
    "\u02ca\u0003\u0002\u0002\u0002\u02d7\u02cd\u0003\u0002\u0002\u0002\u02d7",
    "\u02cf\u0003\u0002\u0002\u0002\u02d7\u02d2\u0003\u0002\u0002\u0002\u02d7",
    "\u02d5\u0003\u0002\u0002\u0002\u02d8\u02db\u0003\u0002\u0002\u0002\u02d9",
    "\u02d7\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da",
    "e\u0003\u0002\u0002\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02dc",
    "\u02e3\u0007i\u0002\u0002\u02dd\u02df\u0007\b\u0002\u0002\u02de\u02e0",
    "\u0005H%\u0002\u02df\u02de\u0003\u0002\u0002\u0002\u02df\u02e0\u0003",
    "\u0002\u0002\u0002\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1\u02e3\u0007",
    "\t\u0002\u0002\u02e2\u02dc\u0003\u0002\u0002\u0002\u02e2\u02dd\u0003",
    "\u0002\u0002\u0002\u02e3g\u0003\u0002\u0002\u0002\u02e4\u02ea\u0005",
    "d3\u0002\u02e5\u02e6\u0007\n\u0002\u0002\u02e6\u02e7\u0005N(\u0002\u02e7",
    "\u02e8\u0007\u000b\u0002\u0002\u02e8\u02ea\u0003\u0002\u0002\u0002\u02e9",
    "\u02e4\u0003\u0002\u0002\u0002\u02e9\u02e5\u0003\u0002\u0002\u0002\u02ea",
    "i\u0003\u0002\u0002\u0002\u02eb\u02ec\t\t\u0002\u0002\u02eck\u0003\u0002",
    "\u0002\u0002\u02ed\u02f4\u00078\u0002\u0002\u02ee\u02f4\u00079\u0002",
    "\u0002\u02ef\u02f4\u0007j\u0002\u0002\u02f0\u02f4\u0007k\u0002\u0002",
    "\u02f1\u02f4\u0007\u0005\u0002\u0002\u02f2\u02f4\u0005n8\u0002\u02f3",
    "\u02ed\u0003\u0002\u0002\u0002\u02f3\u02ee\u0003\u0002\u0002\u0002\u02f3",
    "\u02ef\u0003\u0002\u0002\u0002\u02f3\u02f0\u0003\u0002\u0002\u0002\u02f3",
    "\u02f1\u0003\u0002\u0002\u0002\u02f3\u02f2\u0003\u0002\u0002\u0002\u02f4",
    "m\u0003\u0002\u0002\u0002\u02f5\u02f6\t\n\u0002\u0002\u02f6o\u0003\u0002",
    "\u0002\u0002\u02f7\u02fa\u0007i\u0002\u0002\u02f8\u02fa\u0005r:\u0002",
    "\u02f9\u02f7\u0003\u0002\u0002\u0002\u02f9\u02f8\u0003\u0002\u0002\u0002",
    "\u02faq\u0003\u0002\u0002\u0002\u02fb\u02ff\u0005t;\u0002\u02fc\u02ff",
    "\u00078\u0002\u0002\u02fd\u02ff\u00079\u0002\u0002\u02fe\u02fb\u0003",
    "\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02fd\u0003",
    "\u0002\u0002\u0002\u02ffs\u0003\u0002\u0002\u0002\u0300\u0301\t\u000b",
    "\u0002\u0002\u0301u\u0003\u0002\u0002\u0002\u0302\u0303\u0007i\u0002",
    "\u0002\u0303\u0304\u0006<!\u0002\u0304\u0305\u0005\\/\u0002\u0305w\u0003",
    "\u0002\u0002\u0002\u0306\u0307\u0007i\u0002\u0002\u0307\u0308\u0006",
    "=\"\u0002\u0308\u0309\u0005\\/\u0002\u0309y\u0003\u0002\u0002\u0002",
    "\u030a\u030f\u0007\f\u0002\u0002\u030b\u030f\u0007\u0002\u0002\u0003",
    "\u030c\u030f\u0006>#\u0002\u030d\u030f\u0006>$\u0002\u030e\u030a\u0003",
    "\u0002\u0002\u0002\u030e\u030b\u0003\u0002\u0002\u0002\u030e\u030c\u0003",
    "\u0002\u0002\u0002\u030e\u030d\u0003\u0002\u0002\u0002\u030f{\u0003",
    "\u0002\u0002\u0002M}\u0082\u0097\u009b\u00a2\u00ad\u00b3\u00b9\u00c8",
    "\u00db\u00df\u00e3\u00ed\u00f1\u00fc\u0109\u010f\u0116\u011d\u0124\u0136",
    "\u013a\u013c\u0143\u0149\u014e\u015d\u0160\u0172\u017f\u0185\u018d\u0191",
    "\u0196\u01a7\u01af\u01b2\u01b7\u01c3\u01c8\u01cd\u01d2\u01d8\u01dd\u01e3",
    "\u01e7\u01ec\u01f5\u01fa\u0200\u0203\u0206\u0211\u0214\u0217\u0236\u023b",
    "\u0243\u0248\u024b\u0257\u025d\u0261\u026a\u0270\u0292\u02d7\u02d9\u02df",
    "\u02e2\u02e9\u02f3\u02f9\u02fe\u030e"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, "'['", "']'", "'('", "')'", 
                     "'{'", "'}'", "';'", "','", "'='", "'?'", "':'", "'...'", 
                     "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
                     "'*'", "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", 
                     "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", 
                     "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", 
                     "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
                     "'&='", "'^='", "'|='", "'=>'", "'null'", null, null, 
                     null, null, null, null, "'break'", "'do'", "'instanceof'", 
                     "'typeof'", "'case'", "'else'", "'new'", "'var'", "'catch'", 
                     "'finally'", "'return'", "'void'", "'continue'", "'for'", 
                     "'switch'", "'while'", "'debugger'", "'function'", 
                     "'this'", "'with'", "'default'", "'if'", "'throw'", 
                     "'delete'", "'in'", "'try'", "'class'", "'enum'", "'extends'", 
                     "'super'", "'const'", "'export'", "'import'", "'implements'", 
                     "'let'", "'private'", "'public'", "'interface'", "'package'", 
                     "'protected'", "'static'", "'yield'" ];

var symbolicNames = [ null, "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
                      "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", 
                      "OpenBrace", "CloseBrace", "SemiColon", "Comma", "Assign", 
                      "QuestionMark", "Colon", "Ellipsis", "Dot", "PlusPlus", 
                      "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
                      "Divide", "Modulus", "RightShiftArithmetic", "LeftShiftArithmetic", 
                      "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
                      "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", 
                      "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", 
                      "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
                      "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                      "BitAndAssign", "BitXorAssign", "BitOrAssign", "ARROW", 
                      "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
                      "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
                      "BinaryIntegerLiteral", "Break", "Do", "Instanceof", 
                      "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", 
                      "Return", "Void", "Continue", "For", "Switch", "While", 
                      "Debugger", "Function", "This", "With", "Default", 
                      "If", "Throw", "Delete", "In", "Try", "Class", "Enum", 
                      "Extends", "Super", "Const", "Export", "Import", "Implements", 
                      "Let", "Private", "Public", "Interface", "Package", 
                      "Protected", "Static", "Yield", "Identifier", "StringLiteral", 
                      "TemplateStringLiteral", "WhiteSpaces", "LineTerminator", 
                      "HtmlComment", "CDataComment", "UnexpectedCharacter" ];

var ruleNames =  [ "program", "sourceElement", "statement", "block", "statementList", 
                   "variableStatement", "variableDeclarationList", "variableDeclaration", 
                   "variableName", "emptyStatement", "expressionStatement", 
                   "ifStatement", "iterationStatement", "varModifier", "continueStatement", 
                   "breakStatement", "returnStatement", "withStatement", 
                   "switchStatement", "caseBlock", "caseClauses", "caseClause", 
                   "defaultClause", "labelledStatement", "throwStatement", 
                   "tryStatement", "catchProduction", "finallyProduction", 
                   "debuggerStatement", "functionDeclaration", "classDeclaration", 
                   "classTail", "classElement", "methodDefinition", "generatorMethod", 
                   "formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
                   "functionBody", "sourceElements", "arrayLiteral", "elementList", 
                   "lastElement", "objectLiteral", "propertyAssignment", 
                   "propertyName", "arguments", "lastArgument", "expressionSequence", 
                   "singleExpression", "arrowFunctionParameters", "arrowFunctionBody", 
                   "assignmentOperator", "literal", "numericLiteral", "identifierName", 
                   "reservedWord", "keyword", "getter", "setter", "eos" ];

function JavaScriptParser (input) {
	JavaScriptBaseParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

JavaScriptParser.prototype = Object.create(JavaScriptBaseParser.prototype);
JavaScriptParser.prototype.constructor = JavaScriptParser;

Object.defineProperty(JavaScriptParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

JavaScriptParser.EOF = antlr4.Token.EOF;
JavaScriptParser.MultiLineComment = 1;
JavaScriptParser.SingleLineComment = 2;
JavaScriptParser.RegularExpressionLiteral = 3;
JavaScriptParser.OpenBracket = 4;
JavaScriptParser.CloseBracket = 5;
JavaScriptParser.OpenParen = 6;
JavaScriptParser.CloseParen = 7;
JavaScriptParser.OpenBrace = 8;
JavaScriptParser.CloseBrace = 9;
JavaScriptParser.SemiColon = 10;
JavaScriptParser.Comma = 11;
JavaScriptParser.Assign = 12;
JavaScriptParser.QuestionMark = 13;
JavaScriptParser.Colon = 14;
JavaScriptParser.Ellipsis = 15;
JavaScriptParser.Dot = 16;
JavaScriptParser.PlusPlus = 17;
JavaScriptParser.MinusMinus = 18;
JavaScriptParser.Plus = 19;
JavaScriptParser.Minus = 20;
JavaScriptParser.BitNot = 21;
JavaScriptParser.Not = 22;
JavaScriptParser.Multiply = 23;
JavaScriptParser.Divide = 24;
JavaScriptParser.Modulus = 25;
JavaScriptParser.RightShiftArithmetic = 26;
JavaScriptParser.LeftShiftArithmetic = 27;
JavaScriptParser.RightShiftLogical = 28;
JavaScriptParser.LessThan = 29;
JavaScriptParser.MoreThan = 30;
JavaScriptParser.LessThanEquals = 31;
JavaScriptParser.GreaterThanEquals = 32;
JavaScriptParser.Equals_ = 33;
JavaScriptParser.NotEquals = 34;
JavaScriptParser.IdentityEquals = 35;
JavaScriptParser.IdentityNotEquals = 36;
JavaScriptParser.BitAnd = 37;
JavaScriptParser.BitXOr = 38;
JavaScriptParser.BitOr = 39;
JavaScriptParser.And = 40;
JavaScriptParser.Or = 41;
JavaScriptParser.MultiplyAssign = 42;
JavaScriptParser.DivideAssign = 43;
JavaScriptParser.ModulusAssign = 44;
JavaScriptParser.PlusAssign = 45;
JavaScriptParser.MinusAssign = 46;
JavaScriptParser.LeftShiftArithmeticAssign = 47;
JavaScriptParser.RightShiftArithmeticAssign = 48;
JavaScriptParser.RightShiftLogicalAssign = 49;
JavaScriptParser.BitAndAssign = 50;
JavaScriptParser.BitXorAssign = 51;
JavaScriptParser.BitOrAssign = 52;
JavaScriptParser.ARROW = 53;
JavaScriptParser.NullLiteral = 54;
JavaScriptParser.BooleanLiteral = 55;
JavaScriptParser.DecimalLiteral = 56;
JavaScriptParser.HexIntegerLiteral = 57;
JavaScriptParser.OctalIntegerLiteral = 58;
JavaScriptParser.OctalIntegerLiteral2 = 59;
JavaScriptParser.BinaryIntegerLiteral = 60;
JavaScriptParser.Break = 61;
JavaScriptParser.Do = 62;
JavaScriptParser.Instanceof = 63;
JavaScriptParser.Typeof = 64;
JavaScriptParser.Case = 65;
JavaScriptParser.Else = 66;
JavaScriptParser.New = 67;
JavaScriptParser.Var = 68;
JavaScriptParser.Catch = 69;
JavaScriptParser.Finally = 70;
JavaScriptParser.Return = 71;
JavaScriptParser.Void = 72;
JavaScriptParser.Continue = 73;
JavaScriptParser.For = 74;
JavaScriptParser.Switch = 75;
JavaScriptParser.While = 76;
JavaScriptParser.Debugger = 77;
JavaScriptParser.Function = 78;
JavaScriptParser.This = 79;
JavaScriptParser.With = 80;
JavaScriptParser.Default = 81;
JavaScriptParser.If = 82;
JavaScriptParser.Throw = 83;
JavaScriptParser.Delete = 84;
JavaScriptParser.In = 85;
JavaScriptParser.Try = 86;
JavaScriptParser.Class = 87;
JavaScriptParser.Enum = 88;
JavaScriptParser.Extends = 89;
JavaScriptParser.Super = 90;
JavaScriptParser.Const = 91;
JavaScriptParser.Export = 92;
JavaScriptParser.Import = 93;
JavaScriptParser.Implements = 94;
JavaScriptParser.Let = 95;
JavaScriptParser.Private = 96;
JavaScriptParser.Public = 97;
JavaScriptParser.Interface = 98;
JavaScriptParser.Package = 99;
JavaScriptParser.Protected = 100;
JavaScriptParser.Static = 101;
JavaScriptParser.Yield = 102;
JavaScriptParser.Identifier = 103;
JavaScriptParser.StringLiteral = 104;
JavaScriptParser.TemplateStringLiteral = 105;
JavaScriptParser.WhiteSpaces = 106;
JavaScriptParser.LineTerminator = 107;
JavaScriptParser.HtmlComment = 108;
JavaScriptParser.CDataComment = 109;
JavaScriptParser.UnexpectedCharacter = 110;

JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_variableStatement = 5;
JavaScriptParser.RULE_variableDeclarationList = 6;
JavaScriptParser.RULE_variableDeclaration = 7;
JavaScriptParser.RULE_variableName = 8;
JavaScriptParser.RULE_emptyStatement = 9;
JavaScriptParser.RULE_expressionStatement = 10;
JavaScriptParser.RULE_ifStatement = 11;
JavaScriptParser.RULE_iterationStatement = 12;
JavaScriptParser.RULE_varModifier = 13;
JavaScriptParser.RULE_continueStatement = 14;
JavaScriptParser.RULE_breakStatement = 15;
JavaScriptParser.RULE_returnStatement = 16;
JavaScriptParser.RULE_withStatement = 17;
JavaScriptParser.RULE_switchStatement = 18;
JavaScriptParser.RULE_caseBlock = 19;
JavaScriptParser.RULE_caseClauses = 20;
JavaScriptParser.RULE_caseClause = 21;
JavaScriptParser.RULE_defaultClause = 22;
JavaScriptParser.RULE_labelledStatement = 23;
JavaScriptParser.RULE_throwStatement = 24;
JavaScriptParser.RULE_tryStatement = 25;
JavaScriptParser.RULE_catchProduction = 26;
JavaScriptParser.RULE_finallyProduction = 27;
JavaScriptParser.RULE_debuggerStatement = 28;
JavaScriptParser.RULE_functionDeclaration = 29;
JavaScriptParser.RULE_classDeclaration = 30;
JavaScriptParser.RULE_classTail = 31;
JavaScriptParser.RULE_classElement = 32;
JavaScriptParser.RULE_methodDefinition = 33;
JavaScriptParser.RULE_generatorMethod = 34;
JavaScriptParser.RULE_formalParameterList = 35;
JavaScriptParser.RULE_formalParameterArg = 36;
JavaScriptParser.RULE_lastFormalParameterArg = 37;
JavaScriptParser.RULE_functionBody = 38;
JavaScriptParser.RULE_sourceElements = 39;
JavaScriptParser.RULE_arrayLiteral = 40;
JavaScriptParser.RULE_elementList = 41;
JavaScriptParser.RULE_lastElement = 42;
JavaScriptParser.RULE_objectLiteral = 43;
JavaScriptParser.RULE_propertyAssignment = 44;
JavaScriptParser.RULE_propertyName = 45;
JavaScriptParser.RULE_arguments = 46;
JavaScriptParser.RULE_lastArgument = 47;
JavaScriptParser.RULE_expressionSequence = 48;
JavaScriptParser.RULE_singleExpression = 49;
JavaScriptParser.RULE_arrowFunctionParameters = 50;
JavaScriptParser.RULE_arrowFunctionBody = 51;
JavaScriptParser.RULE_assignmentOperator = 52;
JavaScriptParser.RULE_literal = 53;
JavaScriptParser.RULE_numericLiteral = 54;
JavaScriptParser.RULE_identifierName = 55;
JavaScriptParser.RULE_reservedWord = 56;
JavaScriptParser.RULE_keyword = 57;
JavaScriptParser.RULE_getter = 58;
JavaScriptParser.RULE_setter = 59;
JavaScriptParser.RULE_eos = 60;

function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
    return this.getToken(JavaScriptParser.EOF, 0);
};

ProgramContext.prototype.sourceElements = function() {
    return this.getTypedRuleContext(SourceElementsContext,0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitProgram(this);
	}
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ProgramContext = ProgramContext;

JavaScriptParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 123;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 122;
            this.sourceElements();

        }
        this.state = 125;
        this.match(JavaScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SourceElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElement;
    return this;
}

SourceElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementContext.prototype.constructor = SourceElementContext;

SourceElementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SourceElementContext.prototype.Export = function() {
    return this.getToken(JavaScriptParser.Export, 0);
};

SourceElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterSourceElement(this);
	}
};

SourceElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitSourceElement(this);
	}
};

SourceElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSourceElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.SourceElementContext = SourceElementContext;

JavaScriptParser.prototype.sourceElement = function() {

    var localctx = new SourceElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 128;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        if(la_===1) {
            this.state = 127;
            this.match(JavaScriptParser.Export);

        }
        this.state = 130;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.withStatement = function() {
    return this.getTypedRuleContext(WithStatementContext,0);
};

StatementContext.prototype.labelledStatement = function() {
    return this.getTypedRuleContext(LabelledStatementContext,0);
};

StatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementContext.prototype.debuggerStatement = function() {
    return this.getTypedRuleContext(DebuggerStatementContext,0);
};

StatementContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.StatementContext = StatementContext;

JavaScriptParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);
    try {
        this.state = 149;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 132;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 133;
            this.variableStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 134;
            this.emptyStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 135;
            this.classDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 136;
            this.expressionStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 137;
            this.ifStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 138;
            this.iterationStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 139;
            this.continueStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 140;
            this.breakStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 141;
            this.returnStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 142;
            this.withStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 143;
            this.labelledStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 144;
            this.switchStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 145;
            this.throwStatement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 146;
            this.tryStatement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 147;
            this.debuggerStatement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 148;
            this.functionDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.BlockContext = BlockContext;

JavaScriptParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 151;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 153;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        if(la_===1) {
            this.state = 152;
            this.statementList();

        }
        this.state = 155;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitStatementList(this);
	}
};

StatementListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitStatementList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.StatementListContext = StatementListContext;

JavaScriptParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 158; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 157;
        		this.statement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 160; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableStatement;
    return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.varModifier = function() {
    return this.getTypedRuleContext(VarModifierContext,0);
};

VariableStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

VariableStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

VariableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterVariableStatement(this);
	}
};

VariableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitVariableStatement(this);
	}
};

VariableStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVariableStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VariableStatementContext = VariableStatementContext;

JavaScriptParser.prototype.variableStatement = function() {

    var localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, JavaScriptParser.RULE_variableStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 162;
        this.varModifier();
        this.state = 163;
        this.variableDeclarationList();
        this.state = 164;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterVariableDeclarationList(this);
	}
};

VariableDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitVariableDeclarationList(this);
	}
};

VariableDeclarationListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVariableDeclarationList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;

JavaScriptParser.prototype.variableDeclarationList = function() {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, JavaScriptParser.RULE_variableDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 166;
        this.variableDeclaration();
        this.state = 171;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 167;
                this.match(JavaScriptParser.Comma);
                this.state = 168;
                this.variableDeclaration(); 
            }
            this.state = 173;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.variableName = function() {
    return this.getTypedRuleContext(VariableNameContext,0);
};

VariableDeclarationContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext;

JavaScriptParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, JavaScriptParser.RULE_variableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 174;
        this.variableName();
        this.state = 177;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        if(la_===1) {
            this.state = 175;
            this.match(JavaScriptParser.Assign);
            this.state = 176;
            this.singleExpression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableName;
    return this;
}

VariableNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableNameContext.prototype.constructor = VariableNameContext;

VariableNameContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

VariableNameContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

VariableNameContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};

VariableNameContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

VariableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterVariableName(this);
	}
};

VariableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitVariableName(this);
	}
};

VariableNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVariableName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VariableNameContext = VariableNameContext;

JavaScriptParser.prototype.variableName = function() {

    var localctx = new VariableNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, JavaScriptParser.RULE_variableName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 183;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.state = 179;
            this.match(JavaScriptParser.Identifier);
            break;

        case 2:
            this.state = 180;
            this.arrayLiteral();
            break;

        case 3:
            this.state = 181;
            this.objectLiteral();
            break;

        case 4:
            this.state = 182;
            this.identifierName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitEmptyStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.EmptyStatementContext = EmptyStatementContext;

JavaScriptParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, JavaScriptParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        this.match(JavaScriptParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ExpressionStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitExpressionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext;

JavaScriptParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, JavaScriptParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 187;
        if (!( this.notOpenBraceAndNotFunction())) {
            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
        }
        this.state = 188;
        this.expressionSequence();
        this.state = 189;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(JavaScriptParser.If, 0);
};

IfStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.Else = function() {
    return this.getToken(JavaScriptParser.Else, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitIfStatement(this);
	}
};

IfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitIfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.IfStatementContext = IfStatementContext;

JavaScriptParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, JavaScriptParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 191;
        this.match(JavaScriptParser.If);
        this.state = 192;
        this.match(JavaScriptParser.OpenParen);
        this.state = 193;
        this.expressionSequence();
        this.state = 194;
        this.match(JavaScriptParser.CloseParen);
        this.state = 195;
        this.statement();
        this.state = 198;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        if(la_===1) {
            this.state = 196;
            this.match(JavaScriptParser.Else);
            this.state = 197;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;


 
IterationStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DoStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoStatementContext.prototype = Object.create(IterationStatementContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

JavaScriptParser.DoStatementContext = DoStatementContext;

DoStatementContext.prototype.Do = function() {
    return this.getToken(JavaScriptParser.Do, 0);
};

DoStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoStatementContext.prototype.While = function() {
    return this.getToken(JavaScriptParser.While, 0);
};

DoStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

DoStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};
DoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterDoStatement(this);
	}
};

DoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitDoStatement(this);
	}
};

DoStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDoStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForVarStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForVarStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForVarStatementContext.prototype.constructor = ForVarStatementContext;

JavaScriptParser.ForVarStatementContext = ForVarStatementContext;

ForVarStatementContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

ForVarStatementContext.prototype.varModifier = function() {
    return this.getTypedRuleContext(VarModifierContext,0);
};

ForVarStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

ForVarStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForVarStatementContext.prototype.expressionSequence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionSequenceContext);
    } else {
        return this.getTypedRuleContext(ExpressionSequenceContext,i);
    }
};
ForVarStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterForVarStatement(this);
	}
};

ForVarStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitForVarStatement(this);
	}
};

ForVarStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitForVarStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForVarInStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForVarInStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForVarInStatementContext.prototype.constructor = ForVarInStatementContext;

JavaScriptParser.ForVarInStatementContext = ForVarInStatementContext;

ForVarInStatementContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

ForVarInStatementContext.prototype.varModifier = function() {
    return this.getTypedRuleContext(VarModifierContext,0);
};

ForVarInStatementContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

ForVarInStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ForVarInStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForVarInStatementContext.prototype.In = function() {
    return this.getToken(JavaScriptParser.In, 0);
};

ForVarInStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};
ForVarInStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterForVarInStatement(this);
	}
};

ForVarInStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitForVarInStatement(this);
	}
};

ForVarInStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitForVarInStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function WhileStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(IterationStatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

JavaScriptParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.While = function() {
    return this.getToken(JavaScriptParser.While, 0);
};

WhileStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitWhileStatement(this);
	}
};

WhileStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitWhileStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

JavaScriptParser.ForStatementContext = ForStatementContext;

ForStatementContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.expressionSequence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionSequenceContext);
    } else {
        return this.getTypedRuleContext(ExpressionSequenceContext,i);
    }
};
ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitForStatement(this);
	}
};

ForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForInStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForInStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForInStatementContext.prototype.constructor = ForInStatementContext;

JavaScriptParser.ForInStatementContext = ForInStatementContext;

ForInStatementContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

ForInStatementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ForInStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ForInStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForInStatementContext.prototype.In = function() {
    return this.getToken(JavaScriptParser.In, 0);
};

ForInStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};
ForInStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterForInStatement(this);
	}
};

ForInStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitForInStatement(this);
	}
};

ForInStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitForInStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};



JavaScriptParser.IterationStatementContext = IterationStatementContext;

JavaScriptParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, JavaScriptParser.RULE_iterationStatement);
    var _la = 0; // Token type
    try {
        this.state = 269;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DoStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 200;
            this.match(JavaScriptParser.Do);
            this.state = 201;
            this.statement();
            this.state = 202;
            this.match(JavaScriptParser.While);
            this.state = 203;
            this.match(JavaScriptParser.OpenParen);
            this.state = 204;
            this.expressionSequence();
            this.state = 205;
            this.match(JavaScriptParser.CloseParen);
            this.state = 206;
            this.eos();
            break;

        case 2:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 208;
            this.match(JavaScriptParser.While);
            this.state = 209;
            this.match(JavaScriptParser.OpenParen);
            this.state = 210;
            this.expressionSequence();
            this.state = 211;
            this.match(JavaScriptParser.CloseParen);
            this.state = 212;
            this.statement();
            break;

        case 3:
            localctx = new ForStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 214;
            this.match(JavaScriptParser.For);
            this.state = 215;
            this.match(JavaScriptParser.OpenParen);
            this.state = 217;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (JavaScriptParser.NullLiteral - 54)) | (1 << (JavaScriptParser.BooleanLiteral - 54)) | (1 << (JavaScriptParser.DecimalLiteral - 54)) | (1 << (JavaScriptParser.HexIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 54)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 54)) | (1 << (JavaScriptParser.Typeof - 54)) | (1 << (JavaScriptParser.New - 54)) | (1 << (JavaScriptParser.Void - 54)) | (1 << (JavaScriptParser.Function - 54)) | (1 << (JavaScriptParser.This - 54)) | (1 << (JavaScriptParser.Delete - 54)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (JavaScriptParser.Class - 87)) | (1 << (JavaScriptParser.Super - 87)) | (1 << (JavaScriptParser.Identifier - 87)) | (1 << (JavaScriptParser.StringLiteral - 87)) | (1 << (JavaScriptParser.TemplateStringLiteral - 87)))) !== 0)) {
                this.state = 216;
                this.expressionSequence();
            }

            this.state = 219;
            this.match(JavaScriptParser.SemiColon);
            this.state = 221;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (JavaScriptParser.NullLiteral - 54)) | (1 << (JavaScriptParser.BooleanLiteral - 54)) | (1 << (JavaScriptParser.DecimalLiteral - 54)) | (1 << (JavaScriptParser.HexIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 54)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 54)) | (1 << (JavaScriptParser.Typeof - 54)) | (1 << (JavaScriptParser.New - 54)) | (1 << (JavaScriptParser.Void - 54)) | (1 << (JavaScriptParser.Function - 54)) | (1 << (JavaScriptParser.This - 54)) | (1 << (JavaScriptParser.Delete - 54)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (JavaScriptParser.Class - 87)) | (1 << (JavaScriptParser.Super - 87)) | (1 << (JavaScriptParser.Identifier - 87)) | (1 << (JavaScriptParser.StringLiteral - 87)) | (1 << (JavaScriptParser.TemplateStringLiteral - 87)))) !== 0)) {
                this.state = 220;
                this.expressionSequence();
            }

            this.state = 223;
            this.match(JavaScriptParser.SemiColon);
            this.state = 225;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (JavaScriptParser.NullLiteral - 54)) | (1 << (JavaScriptParser.BooleanLiteral - 54)) | (1 << (JavaScriptParser.DecimalLiteral - 54)) | (1 << (JavaScriptParser.HexIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 54)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 54)) | (1 << (JavaScriptParser.Typeof - 54)) | (1 << (JavaScriptParser.New - 54)) | (1 << (JavaScriptParser.Void - 54)) | (1 << (JavaScriptParser.Function - 54)) | (1 << (JavaScriptParser.This - 54)) | (1 << (JavaScriptParser.Delete - 54)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (JavaScriptParser.Class - 87)) | (1 << (JavaScriptParser.Super - 87)) | (1 << (JavaScriptParser.Identifier - 87)) | (1 << (JavaScriptParser.StringLiteral - 87)) | (1 << (JavaScriptParser.TemplateStringLiteral - 87)))) !== 0)) {
                this.state = 224;
                this.expressionSequence();
            }

            this.state = 227;
            this.match(JavaScriptParser.CloseParen);
            this.state = 228;
            this.statement();
            break;

        case 4:
            localctx = new ForVarStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 229;
            this.match(JavaScriptParser.For);
            this.state = 230;
            this.match(JavaScriptParser.OpenParen);
            this.state = 231;
            this.varModifier();
            this.state = 232;
            this.variableDeclarationList();
            this.state = 233;
            this.match(JavaScriptParser.SemiColon);
            this.state = 235;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (JavaScriptParser.NullLiteral - 54)) | (1 << (JavaScriptParser.BooleanLiteral - 54)) | (1 << (JavaScriptParser.DecimalLiteral - 54)) | (1 << (JavaScriptParser.HexIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 54)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 54)) | (1 << (JavaScriptParser.Typeof - 54)) | (1 << (JavaScriptParser.New - 54)) | (1 << (JavaScriptParser.Void - 54)) | (1 << (JavaScriptParser.Function - 54)) | (1 << (JavaScriptParser.This - 54)) | (1 << (JavaScriptParser.Delete - 54)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (JavaScriptParser.Class - 87)) | (1 << (JavaScriptParser.Super - 87)) | (1 << (JavaScriptParser.Identifier - 87)) | (1 << (JavaScriptParser.StringLiteral - 87)) | (1 << (JavaScriptParser.TemplateStringLiteral - 87)))) !== 0)) {
                this.state = 234;
                this.expressionSequence();
            }

            this.state = 237;
            this.match(JavaScriptParser.SemiColon);
            this.state = 239;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (JavaScriptParser.NullLiteral - 54)) | (1 << (JavaScriptParser.BooleanLiteral - 54)) | (1 << (JavaScriptParser.DecimalLiteral - 54)) | (1 << (JavaScriptParser.HexIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 54)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 54)) | (1 << (JavaScriptParser.Typeof - 54)) | (1 << (JavaScriptParser.New - 54)) | (1 << (JavaScriptParser.Void - 54)) | (1 << (JavaScriptParser.Function - 54)) | (1 << (JavaScriptParser.This - 54)) | (1 << (JavaScriptParser.Delete - 54)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (JavaScriptParser.Class - 87)) | (1 << (JavaScriptParser.Super - 87)) | (1 << (JavaScriptParser.Identifier - 87)) | (1 << (JavaScriptParser.StringLiteral - 87)) | (1 << (JavaScriptParser.TemplateStringLiteral - 87)))) !== 0)) {
                this.state = 238;
                this.expressionSequence();
            }

            this.state = 241;
            this.match(JavaScriptParser.CloseParen);
            this.state = 242;
            this.statement();
            break;

        case 5:
            localctx = new ForInStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 244;
            this.match(JavaScriptParser.For);
            this.state = 245;
            this.match(JavaScriptParser.OpenParen);
            this.state = 246;
            this.singleExpression(0);
            this.state = 250;
            switch(this._input.LA(1)) {
            case JavaScriptParser.In:
                this.state = 247;
                this.match(JavaScriptParser.In);
                break;
            case JavaScriptParser.Identifier:
                this.state = 248;
                this.match(JavaScriptParser.Identifier);
                this.state = 249;
                if (!( this.p("of"))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.p(\"of\")");
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 252;
            this.expressionSequence();
            this.state = 253;
            this.match(JavaScriptParser.CloseParen);
            this.state = 254;
            this.statement();
            break;

        case 6:
            localctx = new ForVarInStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 256;
            this.match(JavaScriptParser.For);
            this.state = 257;
            this.match(JavaScriptParser.OpenParen);
            this.state = 258;
            this.varModifier();
            this.state = 259;
            this.variableDeclaration();
            this.state = 263;
            switch(this._input.LA(1)) {
            case JavaScriptParser.In:
                this.state = 260;
                this.match(JavaScriptParser.In);
                break;
            case JavaScriptParser.Identifier:
                this.state = 261;
                this.match(JavaScriptParser.Identifier);
                this.state = 262;
                if (!( this.p("of"))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.p(\"of\")");
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 265;
            this.expressionSequence();
            this.state = 266;
            this.match(JavaScriptParser.CloseParen);
            this.state = 267;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_varModifier;
    return this;
}

VarModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarModifierContext.prototype.constructor = VarModifierContext;

VarModifierContext.prototype.Var = function() {
    return this.getToken(JavaScriptParser.Var, 0);
};

VarModifierContext.prototype.Let = function() {
    return this.getToken(JavaScriptParser.Let, 0);
};

VarModifierContext.prototype.Const = function() {
    return this.getToken(JavaScriptParser.Const, 0);
};

VarModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterVarModifier(this);
	}
};

VarModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitVarModifier(this);
	}
};

VarModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVarModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VarModifierContext = VarModifierContext;

JavaScriptParser.prototype.varModifier = function() {

    var localctx = new VarModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, JavaScriptParser.RULE_varModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        _la = this._input.LA(1);
        if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (JavaScriptParser.Var - 68)) | (1 << (JavaScriptParser.Const - 68)) | (1 << (JavaScriptParser.Let - 68)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(JavaScriptParser.Continue, 0);
};

ContinueStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ContinueStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitContinueStatement(this);
	}
};

ContinueStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitContinueStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ContinueStatementContext = ContinueStatementContext;

JavaScriptParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, JavaScriptParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 273;
        this.match(JavaScriptParser.Continue);
        this.state = 276;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 274;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 275;
            this.match(JavaScriptParser.Identifier);

        }
        this.state = 278;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(JavaScriptParser.Break, 0);
};

BreakStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

BreakStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitBreakStatement(this);
	}
};

BreakStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBreakStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.BreakStatementContext = BreakStatementContext;

JavaScriptParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, JavaScriptParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 280;
        this.match(JavaScriptParser.Break);
        this.state = 283;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 281;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 282;
            this.match(JavaScriptParser.Identifier);

        }
        this.state = 285;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(JavaScriptParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ReturnStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitReturnStatement(this);
	}
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ReturnStatementContext = ReturnStatementContext;

JavaScriptParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, JavaScriptParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.match(JavaScriptParser.Return);
        this.state = 290;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 288;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 289;
            this.expressionSequence();

        }
        this.state = 292;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_withStatement;
    return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
    return this.getToken(JavaScriptParser.With, 0);
};

WithStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

WithStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WithStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterWithStatement(this);
	}
};

WithStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitWithStatement(this);
	}
};

WithStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitWithStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.WithStatementContext = WithStatementContext;

JavaScriptParser.prototype.withStatement = function() {

    var localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, JavaScriptParser.RULE_withStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this.match(JavaScriptParser.With);
        this.state = 295;
        this.match(JavaScriptParser.OpenParen);
        this.state = 296;
        this.expressionSequence();
        this.state = 297;
        this.match(JavaScriptParser.CloseParen);
        this.state = 298;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(JavaScriptParser.Switch, 0);
};

SwitchStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

SwitchStatementContext.prototype.caseBlock = function() {
    return this.getTypedRuleContext(CaseBlockContext,0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSwitchStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.SwitchStatementContext = SwitchStatementContext;

JavaScriptParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, JavaScriptParser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 300;
        this.match(JavaScriptParser.Switch);
        this.state = 301;
        this.match(JavaScriptParser.OpenParen);
        this.state = 302;
        this.expressionSequence();
        this.state = 303;
        this.match(JavaScriptParser.CloseParen);
        this.state = 304;
        this.caseBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseBlock;
    return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.caseClauses = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClausesContext);
    } else {
        return this.getTypedRuleContext(CaseClausesContext,i);
    }
};

CaseBlockContext.prototype.defaultClause = function() {
    return this.getTypedRuleContext(DefaultClauseContext,0);
};

CaseBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterCaseBlock(this);
	}
};

CaseBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitCaseBlock(this);
	}
};

CaseBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCaseBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.CaseBlockContext = CaseBlockContext;

JavaScriptParser.prototype.caseBlock = function() {

    var localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, JavaScriptParser.RULE_caseBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 306;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 308;
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Case) {
            this.state = 307;
            this.caseClauses();
        }

        this.state = 314;
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Default) {
            this.state = 310;
            this.defaultClause();
            this.state = 312;
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Case) {
                this.state = 311;
                this.caseClauses();
            }

        }

        this.state = 316;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClauses;
    return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClauseContext);
    } else {
        return this.getTypedRuleContext(CaseClauseContext,i);
    }
};

CaseClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterCaseClauses(this);
	}
};

CaseClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitCaseClauses(this);
	}
};

CaseClausesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCaseClauses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.CaseClausesContext = CaseClausesContext;

JavaScriptParser.prototype.caseClauses = function() {

    var localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, JavaScriptParser.RULE_caseClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 318;
            this.caseClause();
            this.state = 321; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JavaScriptParser.Case);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClause;
    return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
    return this.getToken(JavaScriptParser.Case, 0);
};

CaseClauseContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

CaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

CaseClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterCaseClause(this);
	}
};

CaseClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitCaseClause(this);
	}
};

CaseClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCaseClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.CaseClauseContext = CaseClauseContext;

JavaScriptParser.prototype.caseClause = function() {

    var localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, JavaScriptParser.RULE_caseClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 323;
        this.match(JavaScriptParser.Case);
        this.state = 324;
        this.expressionSequence();
        this.state = 325;
        this.match(JavaScriptParser.Colon);
        this.state = 327;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 326;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_defaultClause;
    return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
    return this.getToken(JavaScriptParser.Default, 0);
};

DefaultClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

DefaultClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterDefaultClause(this);
	}
};

DefaultClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitDefaultClause(this);
	}
};

DefaultClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDefaultClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.DefaultClauseContext = DefaultClauseContext;

JavaScriptParser.prototype.defaultClause = function() {

    var localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, JavaScriptParser.RULE_defaultClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(JavaScriptParser.Default);
        this.state = 330;
        this.match(JavaScriptParser.Colon);
        this.state = 332;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 331;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
    return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

LabelledStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabelledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterLabelledStatement(this);
	}
};

LabelledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitLabelledStatement(this);
	}
};

LabelledStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLabelledStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.LabelledStatementContext = LabelledStatementContext;

JavaScriptParser.prototype.labelledStatement = function() {

    var localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, JavaScriptParser.RULE_labelledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 334;
        this.match(JavaScriptParser.Identifier);
        this.state = 335;
        this.match(JavaScriptParser.Colon);
        this.state = 336;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
    return this.getToken(JavaScriptParser.Throw, 0);
};

ThrowStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ThrowStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitThrowStatement(this);
	}
};

ThrowStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitThrowStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ThrowStatementContext = ThrowStatementContext;

JavaScriptParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, JavaScriptParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 338;
        this.match(JavaScriptParser.Throw);
        this.state = 339;
        if (!( this.notLineTerminator())) {
            throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 340;
        this.expressionSequence();
        this.state = 341;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
    return this.getToken(JavaScriptParser.Try, 0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.catchProduction = function() {
    return this.getTypedRuleContext(CatchProductionContext,0);
};

TryStatementContext.prototype.finallyProduction = function() {
    return this.getTypedRuleContext(FinallyProductionContext,0);
};

TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitTryStatement(this);
	}
};

TryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitTryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.TryStatementContext = TryStatementContext;

JavaScriptParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, JavaScriptParser.RULE_tryStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(JavaScriptParser.Try);
        this.state = 344;
        this.block();
        this.state = 350;
        switch(this._input.LA(1)) {
        case JavaScriptParser.Catch:
            this.state = 345;
            this.catchProduction();
            this.state = 347;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
            if(la_===1) {
                this.state = 346;
                this.finallyProduction();

            }
            break;
        case JavaScriptParser.Finally:
            this.state = 349;
            this.finallyProduction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_catchProduction;
    return this;
}

CatchProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchProductionContext.prototype.constructor = CatchProductionContext;

CatchProductionContext.prototype.Catch = function() {
    return this.getToken(JavaScriptParser.Catch, 0);
};

CatchProductionContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

CatchProductionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchProductionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterCatchProduction(this);
	}
};

CatchProductionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitCatchProduction(this);
	}
};

CatchProductionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCatchProduction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.CatchProductionContext = CatchProductionContext;

JavaScriptParser.prototype.catchProduction = function() {

    var localctx = new CatchProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, JavaScriptParser.RULE_catchProduction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 352;
        this.match(JavaScriptParser.Catch);
        this.state = 353;
        this.match(JavaScriptParser.OpenParen);
        this.state = 354;
        this.match(JavaScriptParser.Identifier);
        this.state = 355;
        this.match(JavaScriptParser.CloseParen);
        this.state = 356;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
    return this;
}

FinallyProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyProductionContext.prototype.constructor = FinallyProductionContext;

FinallyProductionContext.prototype.Finally = function() {
    return this.getToken(JavaScriptParser.Finally, 0);
};

FinallyProductionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyProductionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterFinallyProduction(this);
	}
};

FinallyProductionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitFinallyProduction(this);
	}
};

FinallyProductionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFinallyProduction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FinallyProductionContext = FinallyProductionContext;

JavaScriptParser.prototype.finallyProduction = function() {

    var localctx = new FinallyProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, JavaScriptParser.RULE_finallyProduction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(JavaScriptParser.Finally);
        this.state = 359;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DebuggerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
    return this;
}

DebuggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DebuggerStatementContext.prototype.constructor = DebuggerStatementContext;

DebuggerStatementContext.prototype.Debugger = function() {
    return this.getToken(JavaScriptParser.Debugger, 0);
};

DebuggerStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

DebuggerStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterDebuggerStatement(this);
	}
};

DebuggerStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitDebuggerStatement(this);
	}
};

DebuggerStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDebuggerStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext;

JavaScriptParser.prototype.debuggerStatement = function() {

    var localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, JavaScriptParser.RULE_debuggerStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361;
        this.match(JavaScriptParser.Debugger);
        this.state = 362;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
    return this.getToken(JavaScriptParser.Function, 0);
};

FunctionDeclarationContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclarationContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFunctionDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;

JavaScriptParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, JavaScriptParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 364;
        this.match(JavaScriptParser.Function);
        this.state = 365;
        this.match(JavaScriptParser.Identifier);
        this.state = 366;
        this.match(JavaScriptParser.OpenParen);
        this.state = 368;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
            this.state = 367;
            this.formalParameterList();
        }

        this.state = 370;
        this.match(JavaScriptParser.CloseParen);
        this.state = 371;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 372;
        this.functionBody();
        this.state = 373;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Class = function() {
    return this.getToken(JavaScriptParser.Class, 0);
};

ClassDeclarationContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ClassDeclarationContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext;

JavaScriptParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, JavaScriptParser.RULE_classDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this.match(JavaScriptParser.Class);
        this.state = 376;
        this.match(JavaScriptParser.Identifier);
        this.state = 377;
        this.classTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classTail;
    return this;
}

ClassTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTailContext.prototype.constructor = ClassTailContext;

ClassTailContext.prototype.Extends = function() {
    return this.getToken(JavaScriptParser.Extends, 0);
};

ClassTailContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ClassTailContext.prototype.classElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassElementContext);
    } else {
        return this.getTypedRuleContext(ClassElementContext,i);
    }
};

ClassTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterClassTail(this);
	}
};

ClassTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitClassTail(this);
	}
};

ClassTailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitClassTail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ClassTailContext = ClassTailContext;

JavaScriptParser.prototype.classTail = function() {

    var localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, JavaScriptParser.RULE_classTail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 381;
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Extends) {
            this.state = 379;
            this.match(JavaScriptParser.Extends);
            this.state = 380;
            this.singleExpression(0);
        }

        this.state = 383;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 387;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 384;
                this.classElement(); 
            }
            this.state = 389;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

        this.state = 390;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classElement;
    return this;
}

ClassElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementContext.prototype.constructor = ClassElementContext;

ClassElementContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

ClassElementContext.prototype.Static = function() {
    return this.getToken(JavaScriptParser.Static, 0);
};

ClassElementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ClassElementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

ClassElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterClassElement(this);
	}
};

ClassElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitClassElement(this);
	}
};

ClassElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitClassElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ClassElementContext = ClassElementContext;

JavaScriptParser.prototype.classElement = function() {

    var localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, JavaScriptParser.RULE_classElement);
    try {
        this.state = 399;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 395;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            if(la_===1) {
                this.state = 392;
                this.match(JavaScriptParser.Static);

            } else if(la_===2) {
                this.state = 393;
                if (!( n("static"))) {
                    throw new antlr4.error.FailedPredicateException(this, "n(\"static\")");
                }
                this.state = 394;
                this.match(JavaScriptParser.Identifier);

            }
            this.state = 397;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 398;
            this.emptyStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

MethodDefinitionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

MethodDefinitionContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

MethodDefinitionContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

MethodDefinitionContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

MethodDefinitionContext.prototype.generatorMethod = function() {
    return this.getTypedRuleContext(GeneratorMethodContext,0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMethodDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext;

JavaScriptParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, JavaScriptParser.RULE_methodDefinition);
    var _la = 0; // Token type
    try {
        this.state = 429;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 401;
            this.propertyName();
            this.state = 402;
            this.match(JavaScriptParser.OpenParen);
            this.state = 404;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 403;
                this.formalParameterList();
            }

            this.state = 406;
            this.match(JavaScriptParser.CloseParen);
            this.state = 407;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 408;
            this.functionBody();
            this.state = 409;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 411;
            this.getter();
            this.state = 412;
            this.match(JavaScriptParser.OpenParen);
            this.state = 413;
            this.match(JavaScriptParser.CloseParen);
            this.state = 414;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 415;
            this.functionBody();
            this.state = 416;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 418;
            this.setter();
            this.state = 419;
            this.match(JavaScriptParser.OpenParen);
            this.state = 421;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 420;
                this.formalParameterList();
            }

            this.state = 423;
            this.match(JavaScriptParser.CloseParen);
            this.state = 424;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 425;
            this.functionBody();
            this.state = 426;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 428;
            this.generatorMethod();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_generatorMethod;
    return this;
}

GeneratorMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorMethodContext.prototype.constructor = GeneratorMethodContext;

GeneratorMethodContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

GeneratorMethodContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

GeneratorMethodContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

GeneratorMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterGeneratorMethod(this);
	}
};

GeneratorMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitGeneratorMethod(this);
	}
};

GeneratorMethodContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitGeneratorMethod(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.GeneratorMethodContext = GeneratorMethodContext;

JavaScriptParser.prototype.generatorMethod = function() {

    var localctx = new GeneratorMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, JavaScriptParser.RULE_generatorMethod);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Multiply) {
            this.state = 431;
            this.match(JavaScriptParser.Multiply);
        }

        this.state = 434;
        this.match(JavaScriptParser.Identifier);
        this.state = 435;
        this.match(JavaScriptParser.OpenParen);
        this.state = 437;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
            this.state = 436;
            this.formalParameterList();
        }

        this.state = 439;
        this.match(JavaScriptParser.CloseParen);
        this.state = 440;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 441;
        this.functionBody();
        this.state = 442;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameterArg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterArgContext);
    } else {
        return this.getTypedRuleContext(FormalParameterArgContext,i);
    }
};

FormalParameterListContext.prototype.lastFormalParameterArg = function() {
    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
};

FormalParameterListContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

FormalParameterListContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FormalParameterListContext = FormalParameterListContext;

JavaScriptParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, JavaScriptParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 459;
        switch(this._input.LA(1)) {
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 444;
            this.formalParameterArg();
            this.state = 449;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 445;
                    this.match(JavaScriptParser.Comma);
                    this.state = 446;
                    this.formalParameterArg(); 
                }
                this.state = 451;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
            }

            this.state = 454;
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Comma) {
                this.state = 452;
                this.match(JavaScriptParser.Comma);
                this.state = 453;
                this.lastFormalParameterArg();
            }

            break;
        case JavaScriptParser.Ellipsis:
            this.enterOuterAlt(localctx, 2);
            this.state = 456;
            this.lastFormalParameterArg();
            break;
        case JavaScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 3);
            this.state = 457;
            this.arrayLiteral();
            break;
        case JavaScriptParser.OpenBrace:
            this.enterOuterAlt(localctx, 4);
            this.state = 458;
            this.objectLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
    return this;
}

FormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterArgContext.prototype.constructor = FormalParameterArgContext;

FormalParameterArgContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

FormalParameterArgContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

FormalParameterArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterFormalParameterArg(this);
	}
};

FormalParameterArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitFormalParameterArg(this);
	}
};

FormalParameterArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFormalParameterArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext;

JavaScriptParser.prototype.formalParameterArg = function() {

    var localctx = new FormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, JavaScriptParser.RULE_formalParameterArg);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.match(JavaScriptParser.Identifier);
        this.state = 464;
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Assign) {
            this.state = 462;
            this.match(JavaScriptParser.Assign);
            this.state = 463;
            this.singleExpression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastFormalParameterArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
    return this;
}

LastFormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterArgContext.prototype.constructor = LastFormalParameterArgContext;

LastFormalParameterArgContext.prototype.Ellipsis = function() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
};

LastFormalParameterArgContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

LastFormalParameterArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterLastFormalParameterArg(this);
	}
};

LastFormalParameterArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitLastFormalParameterArg(this);
	}
};

LastFormalParameterArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLastFormalParameterArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext;

JavaScriptParser.prototype.lastFormalParameterArg = function() {

    var localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, JavaScriptParser.RULE_lastFormalParameterArg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 466;
        this.match(JavaScriptParser.Ellipsis);
        this.state = 467;
        this.match(JavaScriptParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.sourceElements = function() {
    return this.getTypedRuleContext(SourceElementsContext,0);
};

FunctionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterFunctionBody(this);
	}
};

FunctionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitFunctionBody(this);
	}
};

FunctionBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFunctionBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FunctionBodyContext = FunctionBodyContext;

JavaScriptParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, JavaScriptParser.RULE_functionBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        if(la_===1) {
            this.state = 469;
            this.sourceElements();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SourceElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElements;
    return this;
}

SourceElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementsContext.prototype.constructor = SourceElementsContext;

SourceElementsContext.prototype.sourceElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SourceElementContext);
    } else {
        return this.getTypedRuleContext(SourceElementContext,i);
    }
};

SourceElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterSourceElements(this);
	}
};

SourceElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitSourceElements(this);
	}
};

SourceElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSourceElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.SourceElementsContext = SourceElementsContext;

JavaScriptParser.prototype.sourceElements = function() {

    var localctx = new SourceElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, JavaScriptParser.RULE_sourceElements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 472;
        		this.sourceElement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 475; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,43, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ArrayLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrayLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext;

JavaScriptParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, JavaScriptParser.RULE_arrayLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 477;
        this.match(JavaScriptParser.OpenBracket);
        this.state = 481;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 478;
                this.match(JavaScriptParser.Comma); 
            }
            this.state = 483;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
        }

        this.state = 485;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (JavaScriptParser.NullLiteral - 54)) | (1 << (JavaScriptParser.BooleanLiteral - 54)) | (1 << (JavaScriptParser.DecimalLiteral - 54)) | (1 << (JavaScriptParser.HexIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 54)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 54)) | (1 << (JavaScriptParser.Typeof - 54)) | (1 << (JavaScriptParser.New - 54)) | (1 << (JavaScriptParser.Void - 54)) | (1 << (JavaScriptParser.Function - 54)) | (1 << (JavaScriptParser.This - 54)) | (1 << (JavaScriptParser.Delete - 54)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (JavaScriptParser.Class - 87)) | (1 << (JavaScriptParser.Super - 87)) | (1 << (JavaScriptParser.Identifier - 87)) | (1 << (JavaScriptParser.StringLiteral - 87)) | (1 << (JavaScriptParser.TemplateStringLiteral - 87)))) !== 0)) {
            this.state = 484;
            this.elementList();
        }

        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JavaScriptParser.Comma) {
            this.state = 487;
            this.match(JavaScriptParser.Comma);
            this.state = 492;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 493;
        this.match(JavaScriptParser.CloseBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_elementList;
    return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

ElementListContext.prototype.lastElement = function() {
    return this.getTypedRuleContext(LastElementContext,0);
};

ElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterElementList(this);
	}
};

ElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitElementList(this);
	}
};

ElementListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitElementList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ElementListContext = ElementListContext;

JavaScriptParser.prototype.elementList = function() {

    var localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, JavaScriptParser.RULE_elementList);
    var _la = 0; // Token type
    try {
        this.state = 516;
        switch(this._input.LA(1)) {
        case JavaScriptParser.RegularExpressionLiteral:
        case JavaScriptParser.OpenBracket:
        case JavaScriptParser.OpenParen:
        case JavaScriptParser.OpenBrace:
        case JavaScriptParser.PlusPlus:
        case JavaScriptParser.MinusMinus:
        case JavaScriptParser.Plus:
        case JavaScriptParser.Minus:
        case JavaScriptParser.BitNot:
        case JavaScriptParser.Not:
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.DecimalLiteral:
        case JavaScriptParser.HexIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral2:
        case JavaScriptParser.BinaryIntegerLiteral:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.New:
        case JavaScriptParser.Void:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.Delete:
        case JavaScriptParser.Class:
        case JavaScriptParser.Super:
        case JavaScriptParser.Identifier:
        case JavaScriptParser.StringLiteral:
        case JavaScriptParser.TemplateStringLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 495;
            this.singleExpression(0);
            this.state = 504;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 497; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 496;
                        this.match(JavaScriptParser.Comma);
                        this.state = 499; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===JavaScriptParser.Comma);
                    this.state = 501;
                    this.singleExpression(0); 
                }
                this.state = 506;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
            }

            this.state = 513;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            if(la_===1) {
                this.state = 508; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 507;
                    this.match(JavaScriptParser.Comma);
                    this.state = 510; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===JavaScriptParser.Comma);
                this.state = 512;
                this.lastElement();

            }
            break;
        case JavaScriptParser.Ellipsis:
            this.enterOuterAlt(localctx, 2);
            this.state = 515;
            this.lastElement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_lastElement;
    return this;
}

LastElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastElementContext.prototype.constructor = LastElementContext;

LastElementContext.prototype.Ellipsis = function() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
};

LastElementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

LastElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterLastElement(this);
	}
};

LastElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitLastElement(this);
	}
};

LastElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLastElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.LastElementContext = LastElementContext;

JavaScriptParser.prototype.lastElement = function() {

    var localctx = new LastElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, JavaScriptParser.RULE_lastElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 518;
        this.match(JavaScriptParser.Ellipsis);
        this.state = 519;
        this.match(JavaScriptParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
    return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.propertyAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyAssignmentContext);
    } else {
        return this.getTypedRuleContext(PropertyAssignmentContext,i);
    }
};

ObjectLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterObjectLiteral(this);
	}
};

ObjectLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitObjectLiteral(this);
	}
};

ObjectLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitObjectLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext;

JavaScriptParser.prototype.objectLiteral = function() {

    var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, JavaScriptParser.RULE_objectLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 530;
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.OpenBracket || _la===JavaScriptParser.Multiply || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (JavaScriptParser.NullLiteral - 54)) | (1 << (JavaScriptParser.BooleanLiteral - 54)) | (1 << (JavaScriptParser.DecimalLiteral - 54)) | (1 << (JavaScriptParser.HexIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 54)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 54)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 54)) | (1 << (JavaScriptParser.Break - 54)) | (1 << (JavaScriptParser.Do - 54)) | (1 << (JavaScriptParser.Instanceof - 54)) | (1 << (JavaScriptParser.Typeof - 54)) | (1 << (JavaScriptParser.Case - 54)) | (1 << (JavaScriptParser.Else - 54)) | (1 << (JavaScriptParser.New - 54)) | (1 << (JavaScriptParser.Var - 54)) | (1 << (JavaScriptParser.Catch - 54)) | (1 << (JavaScriptParser.Finally - 54)) | (1 << (JavaScriptParser.Return - 54)) | (1 << (JavaScriptParser.Void - 54)) | (1 << (JavaScriptParser.Continue - 54)) | (1 << (JavaScriptParser.For - 54)) | (1 << (JavaScriptParser.Switch - 54)) | (1 << (JavaScriptParser.While - 54)) | (1 << (JavaScriptParser.Debugger - 54)) | (1 << (JavaScriptParser.Function - 54)) | (1 << (JavaScriptParser.This - 54)) | (1 << (JavaScriptParser.With - 54)) | (1 << (JavaScriptParser.Default - 54)) | (1 << (JavaScriptParser.If - 54)) | (1 << (JavaScriptParser.Throw - 54)) | (1 << (JavaScriptParser.Delete - 54)) | (1 << (JavaScriptParser.In - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (JavaScriptParser.Try - 86)) | (1 << (JavaScriptParser.Class - 86)) | (1 << (JavaScriptParser.Enum - 86)) | (1 << (JavaScriptParser.Extends - 86)) | (1 << (JavaScriptParser.Super - 86)) | (1 << (JavaScriptParser.Const - 86)) | (1 << (JavaScriptParser.Export - 86)) | (1 << (JavaScriptParser.Import - 86)) | (1 << (JavaScriptParser.Implements - 86)) | (1 << (JavaScriptParser.Let - 86)) | (1 << (JavaScriptParser.Private - 86)) | (1 << (JavaScriptParser.Public - 86)) | (1 << (JavaScriptParser.Interface - 86)) | (1 << (JavaScriptParser.Package - 86)) | (1 << (JavaScriptParser.Protected - 86)) | (1 << (JavaScriptParser.Static - 86)) | (1 << (JavaScriptParser.Yield - 86)) | (1 << (JavaScriptParser.Identifier - 86)) | (1 << (JavaScriptParser.StringLiteral - 86)))) !== 0)) {
            this.state = 522;
            this.propertyAssignment();
            this.state = 527;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 523;
                    this.match(JavaScriptParser.Comma);
                    this.state = 524;
                    this.propertyAssignment(); 
                }
                this.state = 529;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
            }

        }

        this.state = 533;
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Comma) {
            this.state = 532;
            this.match(JavaScriptParser.Comma);
        }

        this.state = 535;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
    return this;
}

PropertyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAssignmentContext.prototype.constructor = PropertyAssignmentContext;


 
PropertyAssignmentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PropertyExpressionAssignmentContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyExpressionAssignmentContext.prototype.constructor = PropertyExpressionAssignmentContext;

JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

PropertyExpressionAssignmentContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

PropertyExpressionAssignmentContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PropertyExpressionAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPropertyExpressionAssignment(this);
	}
};

PropertyExpressionAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPropertyExpressionAssignment(this);
	}
};

PropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertyExpressionAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ComputedPropertyExpressionAssignmentContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComputedPropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
ComputedPropertyExpressionAssignmentContext.prototype.constructor = ComputedPropertyExpressionAssignmentContext;

JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

ComputedPropertyExpressionAssignmentContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
ComputedPropertyExpressionAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterComputedPropertyExpressionAssignment(this);
	}
};

ComputedPropertyExpressionAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitComputedPropertyExpressionAssignment(this);
	}
};

ComputedPropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitComputedPropertyExpressionAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertyShorthandContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyShorthandContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyShorthandContext.prototype.constructor = PropertyShorthandContext;

JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;

PropertyShorthandContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};
PropertyShorthandContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPropertyShorthand(this);
	}
};

PropertyShorthandContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPropertyShorthand(this);
	}
};

PropertyShorthandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertyShorthand(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertySetterContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertySetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertySetterContext.prototype.constructor = PropertySetterContext;

JavaScriptParser.PropertySetterContext = PropertySetterContext;

PropertySetterContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertySetterContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

PropertySetterContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};
PropertySetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPropertySetter(this);
	}
};

PropertySetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPropertySetter(this);
	}
};

PropertySetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertySetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertyGetterContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyGetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyGetterContext.prototype.constructor = PropertyGetterContext;

JavaScriptParser.PropertyGetterContext = PropertyGetterContext;

PropertyGetterContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyGetterContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};
PropertyGetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPropertyGetter(this);
	}
};

PropertyGetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPropertyGetter(this);
	}
};

PropertyGetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertyGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MethodPropertyContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodPropertyContext.prototype = Object.create(PropertyAssignmentContext.prototype);
MethodPropertyContext.prototype.constructor = MethodPropertyContext;

JavaScriptParser.MethodPropertyContext = MethodPropertyContext;

MethodPropertyContext.prototype.generatorMethod = function() {
    return this.getTypedRuleContext(GeneratorMethodContext,0);
};
MethodPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterMethodProperty(this);
	}
};

MethodPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitMethodProperty(this);
	}
};

MethodPropertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMethodProperty(this);
    } else {
        return visitor.visitChildren(this);
    }
};



JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext;

JavaScriptParser.prototype.propertyAssignment = function() {

    var localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, JavaScriptParser.RULE_propertyAssignment);
    var _la = 0; // Token type
    try {
        this.state = 564;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PropertyExpressionAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 537;
            this.propertyName();
            this.state = 538;
            _la = this._input.LA(1);
            if(!(_la===JavaScriptParser.Assign || _la===JavaScriptParser.Colon)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 539;
            this.singleExpression(0);
            break;

        case 2:
            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 541;
            this.match(JavaScriptParser.OpenBracket);
            this.state = 542;
            this.singleExpression(0);
            this.state = 543;
            this.match(JavaScriptParser.CloseBracket);
            this.state = 544;
            this.match(JavaScriptParser.Colon);
            this.state = 545;
            this.singleExpression(0);
            break;

        case 3:
            localctx = new PropertyGetterContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 547;
            this.getter();
            this.state = 548;
            this.match(JavaScriptParser.OpenParen);
            this.state = 549;
            this.match(JavaScriptParser.CloseParen);
            this.state = 550;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 551;
            this.functionBody();
            this.state = 552;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 4:
            localctx = new PropertySetterContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 554;
            this.setter();
            this.state = 555;
            this.match(JavaScriptParser.OpenParen);
            this.state = 556;
            this.match(JavaScriptParser.Identifier);
            this.state = 557;
            this.match(JavaScriptParser.CloseParen);
            this.state = 558;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 559;
            this.functionBody();
            this.state = 560;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 5:
            localctx = new MethodPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 562;
            this.generatorMethod();
            break;

        case 6:
            localctx = new PropertyShorthandContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 563;
            this.match(JavaScriptParser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyName;
    return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

PropertyNameContext.prototype.StringLiteral = function() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
};

PropertyNameContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

PropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPropertyName(this);
	}
};

PropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPropertyName(this);
	}
};

PropertyNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertyName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.PropertyNameContext = PropertyNameContext;

JavaScriptParser.prototype.propertyName = function() {

    var localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, JavaScriptParser.RULE_propertyName);
    try {
        this.state = 569;
        switch(this._input.LA(1)) {
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Implements:
        case JavaScriptParser.Let:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 566;
            this.identifierName();
            break;
        case JavaScriptParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 567;
            this.match(JavaScriptParser.StringLiteral);
            break;
        case JavaScriptParser.DecimalLiteral:
        case JavaScriptParser.HexIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral2:
        case JavaScriptParser.BinaryIntegerLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 568;
            this.numericLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

ArgumentsContext.prototype.lastArgument = function() {
    return this.getTypedRuleContext(LastArgumentContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitArguments(this);
	}
};

ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArgumentsContext = ArgumentsContext;

JavaScriptParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, JavaScriptParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.match(JavaScriptParser.OpenParen);
        this.state = 585;
        switch (this._input.LA(1)) {
        case JavaScriptParser.RegularExpressionLiteral:
        case JavaScriptParser.OpenBracket:
        case JavaScriptParser.OpenParen:
        case JavaScriptParser.OpenBrace:
        case JavaScriptParser.PlusPlus:
        case JavaScriptParser.MinusMinus:
        case JavaScriptParser.Plus:
        case JavaScriptParser.Minus:
        case JavaScriptParser.BitNot:
        case JavaScriptParser.Not:
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.DecimalLiteral:
        case JavaScriptParser.HexIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral2:
        case JavaScriptParser.BinaryIntegerLiteral:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.New:
        case JavaScriptParser.Void:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.Delete:
        case JavaScriptParser.Class:
        case JavaScriptParser.Super:
        case JavaScriptParser.Identifier:
        case JavaScriptParser.StringLiteral:
        case JavaScriptParser.TemplateStringLiteral:
        	this.state = 572;
        	this.singleExpression(0);
        	this.state = 577;
        	this._errHandler.sync(this);
        	var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
        	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        	    if(_alt===1) {
        	        this.state = 573;
        	        this.match(JavaScriptParser.Comma);
        	        this.state = 574;
        	        this.singleExpression(0); 
        	    }
        	    this.state = 579;
        	    this._errHandler.sync(this);
        	    _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
        	}

        	this.state = 582;
        	_la = this._input.LA(1);
        	if(_la===JavaScriptParser.Comma) {
        	    this.state = 580;
        	    this.match(JavaScriptParser.Comma);
        	    this.state = 581;
        	    this.lastArgument();
        	}

        	break;
        case JavaScriptParser.Ellipsis:
        	this.state = 584;
        	this.lastArgument();
        	break;
        case JavaScriptParser.CloseParen:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 587;
        this.match(JavaScriptParser.CloseParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_lastArgument;
    return this;
}

LastArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastArgumentContext.prototype.constructor = LastArgumentContext;

LastArgumentContext.prototype.Ellipsis = function() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
};

LastArgumentContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

LastArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterLastArgument(this);
	}
};

LastArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitLastArgument(this);
	}
};

LastArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLastArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.LastArgumentContext = LastArgumentContext;

JavaScriptParser.prototype.lastArgument = function() {

    var localctx = new LastArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, JavaScriptParser.RULE_lastArgument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.match(JavaScriptParser.Ellipsis);
        this.state = 590;
        this.match(JavaScriptParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionSequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
    return this;
}

ExpressionSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSequenceContext.prototype.constructor = ExpressionSequenceContext;

ExpressionSequenceContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

ExpressionSequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterExpressionSequence(this);
	}
};

ExpressionSequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitExpressionSequence(this);
	}
};

ExpressionSequenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitExpressionSequence(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext;

JavaScriptParser.prototype.expressionSequence = function() {

    var localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, JavaScriptParser.RULE_expressionSequence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 592;
        this.singleExpression(0);
        this.state = 597;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 593;
                this.match(JavaScriptParser.Comma);
                this.state = 594;
                this.singleExpression(0); 
            }
            this.state = 599;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_singleExpression;
    return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;


 
SingleExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TemplateStringExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TemplateStringExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TemplateStringExpressionContext.prototype.constructor = TemplateStringExpressionContext;

JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

TemplateStringExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

TemplateStringExpressionContext.prototype.TemplateStringLiteral = function() {
    return this.getToken(JavaScriptParser.TemplateStringLiteral, 0);
};
TemplateStringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterTemplateStringExpression(this);
	}
};

TemplateStringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitTemplateStringExpression(this);
	}
};

TemplateStringExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitTemplateStringExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TernaryExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;

TernaryExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
TernaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterTernaryExpression(this);
	}
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitTernaryExpression(this);
	}
};

TernaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitTernaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalAndExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalAndExpressionContext.prototype.constructor = LogicalAndExpressionContext;

JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

LogicalAndExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
LogicalAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterLogicalAndExpression(this);
	}
};

LogicalAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitLogicalAndExpression(this);
	}
};

LogicalAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLogicalAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreIncrementExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreIncrementExpressionContext.prototype.constructor = PreIncrementExpressionContext;

JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

PreIncrementExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PreIncrementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPreIncrementExpression(this);
	}
};

PreIncrementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPreIncrementExpression(this);
	}
};

PreIncrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPreIncrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ObjectLiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ObjectLiteralExpressionContext.prototype.constructor = ObjectLiteralExpressionContext;

JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

ObjectLiteralExpressionContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};
ObjectLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterObjectLiteralExpression(this);
	}
};

ObjectLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitObjectLiteralExpression(this);
	}
};

ObjectLiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitObjectLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

JavaScriptParser.InExpressionContext = InExpressionContext;

InExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

InExpressionContext.prototype.In = function() {
    return this.getToken(JavaScriptParser.In, 0);
};
InExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterInExpression(this);
	}
};

InExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitInExpression(this);
	}
};

InExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitInExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalOrExpressionContext.prototype.constructor = LogicalOrExpressionContext;

JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

LogicalOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
LogicalOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterLogicalOrExpression(this);
	}
};

LogicalOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitLogicalOrExpression(this);
	}
};

LogicalOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLogicalOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

JavaScriptParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitNotExpression(this);
	}
};

NotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreDecreaseExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreDecreaseExpressionContext.prototype.constructor = PreDecreaseExpressionContext;

JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

PreDecreaseExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PreDecreaseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPreDecreaseExpression(this);
	}
};

PreDecreaseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPreDecreaseExpression(this);
	}
};

PreDecreaseExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPreDecreaseExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArgumentsExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentsExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArgumentsExpressionContext.prototype.constructor = ArgumentsExpressionContext;

JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

ArgumentsExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArgumentsExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
ArgumentsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterArgumentsExpression(this);
	}
};

ArgumentsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitArgumentsExpression(this);
	}
};

ArgumentsExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArgumentsExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ThisExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

JavaScriptParser.ThisExpressionContext = ThisExpressionContext;

ThisExpressionContext.prototype.This = function() {
    return this.getToken(JavaScriptParser.This, 0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterThisExpression(this);
	}
};

ThisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitThisExpression(this);
	}
};

ThisExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitThisExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;

FunctionExpressionContext.prototype.Function = function() {
    return this.getToken(JavaScriptParser.Function, 0);
};

FunctionExpressionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionExpressionContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

FunctionExpressionContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};
FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFunctionExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryMinusExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryMinusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryMinusExpressionContext.prototype.constructor = UnaryMinusExpressionContext;

JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

UnaryMinusExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
UnaryMinusExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterUnaryMinusExpression(this);
	}
};

UnaryMinusExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitUnaryMinusExpression(this);
	}
};

UnaryMinusExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitUnaryMinusExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AssignmentExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
AssignmentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterAssignmentExpression(this);
	}
};

AssignmentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitAssignmentExpression(this);
	}
};

AssignmentExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAssignmentExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PostDecreaseExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostDecreaseExpressionContext.prototype.constructor = PostDecreaseExpressionContext;

JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

PostDecreaseExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PostDecreaseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPostDecreaseExpression(this);
	}
};

PostDecreaseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPostDecreaseExpression(this);
	}
};

PostDecreaseExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPostDecreaseExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TypeofExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TypeofExpressionContext.prototype.constructor = TypeofExpressionContext;

JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;

TypeofExpressionContext.prototype.Typeof = function() {
    return this.getToken(JavaScriptParser.Typeof, 0);
};

TypeofExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
TypeofExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterTypeofExpression(this);
	}
};

TypeofExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitTypeofExpression(this);
	}
};

TypeofExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitTypeofExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InstanceofExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InstanceofExpressionContext.prototype.constructor = InstanceofExpressionContext;

JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

InstanceofExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

InstanceofExpressionContext.prototype.Instanceof = function() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
};
InstanceofExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterInstanceofExpression(this);
	}
};

InstanceofExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitInstanceofExpression(this);
	}
};

InstanceofExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitInstanceofExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryPlusExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryPlusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryPlusExpressionContext.prototype.constructor = UnaryPlusExpressionContext;

JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

UnaryPlusExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
UnaryPlusExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterUnaryPlusExpression(this);
	}
};

UnaryPlusExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitUnaryPlusExpression(this);
	}
};

UnaryPlusExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitUnaryPlusExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DeleteExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeleteExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
DeleteExpressionContext.prototype.constructor = DeleteExpressionContext;

JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;

DeleteExpressionContext.prototype.Delete = function() {
    return this.getToken(JavaScriptParser.Delete, 0);
};

DeleteExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
DeleteExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterDeleteExpression(this);
	}
};

DeleteExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitDeleteExpression(this);
	}
};

DeleteExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDeleteExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrowFunctionExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowFunctionExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArrowFunctionExpressionContext.prototype.constructor = ArrowFunctionExpressionContext;

JavaScriptParser.ArrowFunctionExpressionContext = ArrowFunctionExpressionContext;

ArrowFunctionExpressionContext.prototype.arrowFunctionParameters = function() {
    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
};

ArrowFunctionExpressionContext.prototype.arrowFunctionBody = function() {
    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
};
ArrowFunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterArrowFunctionExpression(this);
	}
};

ArrowFunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitArrowFunctionExpression(this);
	}
};

ArrowFunctionExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrowFunctionExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EqualityExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
EqualityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitEqualityExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitXOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitXOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitXOrExpressionContext.prototype.constructor = BitXOrExpressionContext;

JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

BitXOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
BitXOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterBitXOrExpression(this);
	}
};

BitXOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitBitXOrExpression(this);
	}
};

BitXOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitXOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SuperExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuperExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
SuperExpressionContext.prototype.constructor = SuperExpressionContext;

JavaScriptParser.SuperExpressionContext = SuperExpressionContext;

SuperExpressionContext.prototype.Super = function() {
    return this.getToken(JavaScriptParser.Super, 0);
};
SuperExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterSuperExpression(this);
	}
};

SuperExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitSuperExpression(this);
	}
};

SuperExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSuperExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MultiplicativeExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMultiplicativeExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitShiftExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitShiftExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitShiftExpressionContext.prototype.constructor = BitShiftExpressionContext;

JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

BitShiftExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
BitShiftExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterBitShiftExpression(this);
	}
};

BitShiftExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitBitShiftExpression(this);
	}
};

BitShiftExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitShiftExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitParenthesizedExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AdditiveExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAdditiveExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RelationalExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitRelationalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PostIncrementExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostIncrementExpressionContext.prototype.constructor = PostIncrementExpressionContext;

JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

PostIncrementExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PostIncrementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterPostIncrementExpression(this);
	}
};

PostIncrementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitPostIncrementExpression(this);
	}
};

PostIncrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPostIncrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitNotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitNotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitNotExpressionContext.prototype.constructor = BitNotExpressionContext;

JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;

BitNotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
BitNotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterBitNotExpression(this);
	}
};

BitNotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitBitNotExpression(this);
	}
};

BitNotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NewExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

JavaScriptParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.New = function() {
    return this.getToken(JavaScriptParser.New, 0);
};

NewExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

NewExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitNewExpression(this);
	}
};

NewExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitNewExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrayLiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArrayLiteralExpressionContext.prototype.constructor = ArrayLiteralExpressionContext;

JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

ArrayLiteralExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};
ArrayLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterArrayLiteralExpression(this);
	}
};

ArrayLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitArrayLiteralExpression(this);
	}
};

ArrayLiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrayLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MemberDotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberDotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberDotExpressionContext.prototype.constructor = MemberDotExpressionContext;

JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

MemberDotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

MemberDotExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};
MemberDotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterMemberDotExpression(this);
	}
};

MemberDotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitMemberDotExpression(this);
	}
};

MemberDotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMemberDotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ClassExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClassExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

JavaScriptParser.ClassExpressionContext = ClassExpressionContext;

ClassExpressionContext.prototype.Class = function() {
    return this.getToken(JavaScriptParser.Class, 0);
};

ClassExpressionContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassExpressionContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};
ClassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterClassExpression(this);
	}
};

ClassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitClassExpression(this);
	}
};

ClassExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitClassExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MemberIndexExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberIndexExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberIndexExpressionContext.prototype.constructor = MemberIndexExpressionContext;

JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

MemberIndexExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

MemberIndexExpressionContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};
MemberIndexExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterMemberIndexExpression(this);
	}
};

MemberIndexExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitMemberIndexExpression(this);
	}
};

MemberIndexExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMemberIndexExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IdentifierExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};
IdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterIdentifierExpression(this);
	}
};

IdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitIdentifierExpression(this);
	}
};

IdentifierExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitIdentifierExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitAndExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitAndExpressionContext.prototype.constructor = BitAndExpressionContext;

JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;

BitAndExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
BitAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterBitAndExpression(this);
	}
};

BitAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitBitAndExpression(this);
	}
};

BitAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitOrExpressionContext.prototype.constructor = BitOrExpressionContext;

JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;

BitOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};
BitOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterBitOrExpression(this);
	}
};

BitOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitBitOrExpression(this);
	}
};

BitOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AssignmentOperatorExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentOperatorExpressionContext.prototype.constructor = AssignmentOperatorExpressionContext;

JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

AssignmentOperatorExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

AssignmentOperatorExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterAssignmentOperatorExpression(this);
	}
};

AssignmentOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitAssignmentOperatorExpression(this);
	}
};

AssignmentOperatorExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAssignmentOperatorExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function VoidExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VoidExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
VoidExpressionContext.prototype.constructor = VoidExpressionContext;

JavaScriptParser.VoidExpressionContext = VoidExpressionContext;

VoidExpressionContext.prototype.Void = function() {
    return this.getToken(JavaScriptParser.Void, 0);
};

VoidExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
VoidExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterVoidExpression(this);
	}
};

VoidExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitVoidExpression(this);
	}
};

VoidExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVoidExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



JavaScriptParser.prototype.singleExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SingleExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 98;
    this.enterRecursionRule(localctx, 98, JavaScriptParser.RULE_singleExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 656;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FunctionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 601;
            this.match(JavaScriptParser.Function);
            this.state = 603;
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Identifier) {
                this.state = 602;
                this.match(JavaScriptParser.Identifier);
            }

            this.state = 605;
            this.match(JavaScriptParser.OpenParen);
            this.state = 607;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 606;
                this.formalParameterList();
            }

            this.state = 609;
            this.match(JavaScriptParser.CloseParen);
            this.state = 610;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 611;
            this.functionBody();
            this.state = 612;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 2:
            localctx = new ClassExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 614;
            this.match(JavaScriptParser.Class);
            this.state = 616;
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Identifier) {
                this.state = 615;
                this.match(JavaScriptParser.Identifier);
            }

            this.state = 618;
            this.classTail();
            break;

        case 3:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 619;
            this.match(JavaScriptParser.New);
            this.state = 620;
            this.singleExpression(0);
            this.state = 622;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
            if(la_===1) {
                this.state = 621;
                this.arguments();

            }
            break;

        case 4:
            localctx = new DeleteExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 624;
            this.match(JavaScriptParser.Delete);
            this.state = 625;
            this.singleExpression(33);
            break;

        case 5:
            localctx = new VoidExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 626;
            this.match(JavaScriptParser.Void);
            this.state = 627;
            this.singleExpression(32);
            break;

        case 6:
            localctx = new TypeofExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 628;
            this.match(JavaScriptParser.Typeof);
            this.state = 629;
            this.singleExpression(31);
            break;

        case 7:
            localctx = new PreIncrementExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 630;
            this.match(JavaScriptParser.PlusPlus);
            this.state = 631;
            this.singleExpression(30);
            break;

        case 8:
            localctx = new PreDecreaseExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 632;
            this.match(JavaScriptParser.MinusMinus);
            this.state = 633;
            this.singleExpression(29);
            break;

        case 9:
            localctx = new UnaryPlusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 634;
            this.match(JavaScriptParser.Plus);
            this.state = 635;
            this.singleExpression(28);
            break;

        case 10:
            localctx = new UnaryMinusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 636;
            this.match(JavaScriptParser.Minus);
            this.state = 637;
            this.singleExpression(27);
            break;

        case 11:
            localctx = new BitNotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 638;
            this.match(JavaScriptParser.BitNot);
            this.state = 639;
            this.singleExpression(26);
            break;

        case 12:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 640;
            this.match(JavaScriptParser.Not);
            this.state = 641;
            this.singleExpression(25);
            break;

        case 13:
            localctx = new ThisExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 642;
            this.match(JavaScriptParser.This);
            break;

        case 14:
            localctx = new IdentifierExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 643;
            this.match(JavaScriptParser.Identifier);
            break;

        case 15:
            localctx = new SuperExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 644;
            this.match(JavaScriptParser.Super);
            break;

        case 16:
            localctx = new LiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 645;
            this.literal();
            break;

        case 17:
            localctx = new ArrayLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 646;
            this.arrayLiteral();
            break;

        case 18:
            localctx = new ObjectLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 647;
            this.objectLiteral();
            break;

        case 19:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 648;
            this.match(JavaScriptParser.OpenParen);
            this.state = 649;
            this.expressionSequence();
            this.state = 650;
            this.match(JavaScriptParser.CloseParen);
            break;

        case 20:
            localctx = new ArrowFunctionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 652;
            this.arrowFunctionParameters();
            this.state = 653;
            this.match(JavaScriptParser.ARROW);
            this.state = 654;
            this.arrowFunctionBody();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 727;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 725;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 658;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 659;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.Multiply) | (1 << JavaScriptParser.Divide) | (1 << JavaScriptParser.Modulus))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 660;
                    this.singleExpression(25);
                    break;

                case 2:
                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 661;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 662;
                    _la = this._input.LA(1);
                    if(!(_la===JavaScriptParser.Plus || _la===JavaScriptParser.Minus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 663;
                    this.singleExpression(24);
                    break;

                case 3:
                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 664;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 665;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RightShiftArithmetic) | (1 << JavaScriptParser.LeftShiftArithmetic) | (1 << JavaScriptParser.RightShiftLogical))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 666;
                    this.singleExpression(23);
                    break;

                case 4:
                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 667;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 668;
                    _la = this._input.LA(1);
                    if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (JavaScriptParser.LessThan - 29)) | (1 << (JavaScriptParser.MoreThan - 29)) | (1 << (JavaScriptParser.LessThanEquals - 29)) | (1 << (JavaScriptParser.GreaterThanEquals - 29)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 669;
                    this.singleExpression(22);
                    break;

                case 5:
                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 670;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 671;
                    this.match(JavaScriptParser.Instanceof);
                    this.state = 672;
                    this.singleExpression(21);
                    break;

                case 6:
                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 673;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 674;
                    this.match(JavaScriptParser.In);
                    this.state = 675;
                    this.singleExpression(20);
                    break;

                case 7:
                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 676;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 677;
                    _la = this._input.LA(1);
                    if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (JavaScriptParser.Equals_ - 33)) | (1 << (JavaScriptParser.NotEquals - 33)) | (1 << (JavaScriptParser.IdentityEquals - 33)) | (1 << (JavaScriptParser.IdentityNotEquals - 33)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 678;
                    this.singleExpression(19);
                    break;

                case 8:
                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 679;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 680;
                    this.match(JavaScriptParser.BitAnd);
                    this.state = 681;
                    this.singleExpression(18);
                    break;

                case 9:
                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 682;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 683;
                    this.match(JavaScriptParser.BitXOr);
                    this.state = 684;
                    this.singleExpression(17);
                    break;

                case 10:
                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 685;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 686;
                    this.match(JavaScriptParser.BitOr);
                    this.state = 687;
                    this.singleExpression(16);
                    break;

                case 11:
                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 688;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 689;
                    this.match(JavaScriptParser.And);
                    this.state = 690;
                    this.singleExpression(15);
                    break;

                case 12:
                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 691;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 692;
                    this.match(JavaScriptParser.Or);
                    this.state = 693;
                    this.singleExpression(14);
                    break;

                case 13:
                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 694;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 695;
                    this.match(JavaScriptParser.QuestionMark);
                    this.state = 696;
                    this.singleExpression(0);
                    this.state = 697;
                    this.match(JavaScriptParser.Colon);
                    this.state = 698;
                    this.singleExpression(13);
                    break;

                case 14:
                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 700;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 701;
                    this.match(JavaScriptParser.Assign);
                    this.state = 702;
                    this.singleExpression(12);
                    break;

                case 15:
                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 703;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 704;
                    this.assignmentOperator();
                    this.state = 705;
                    this.singleExpression(11);
                    break;

                case 16:
                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 707;
                    if (!( this.precpred(this._ctx, 39))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
                    }
                    this.state = 708;
                    this.match(JavaScriptParser.OpenBracket);
                    this.state = 709;
                    this.expressionSequence();
                    this.state = 710;
                    this.match(JavaScriptParser.CloseBracket);
                    break;

                case 17:
                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 712;
                    if (!( this.precpred(this._ctx, 38))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
                    }
                    this.state = 713;
                    this.match(JavaScriptParser.Dot);
                    this.state = 714;
                    this.identifierName();
                    break;

                case 18:
                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 715;
                    if (!( this.precpred(this._ctx, 37))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
                    }
                    this.state = 716;
                    this.arguments();
                    break;

                case 19:
                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 717;
                    if (!( this.precpred(this._ctx, 35))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
                    }
                    this.state = 718;
                    if (!( this.notLineTerminator())) {
                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
                    }
                    this.state = 719;
                    this.match(JavaScriptParser.PlusPlus);
                    break;

                case 20:
                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 720;
                    if (!( this.precpred(this._ctx, 34))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 34)");
                    }
                    this.state = 721;
                    if (!( this.notLineTerminator())) {
                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
                    }
                    this.state = 722;
                    this.match(JavaScriptParser.MinusMinus);
                    break;

                case 21:
                    localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 723;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 724;
                    this.match(JavaScriptParser.TemplateStringLiteral);
                    break;

                } 
            }
            this.state = 729;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArrowFunctionParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
    return this;
}

ArrowFunctionParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionParametersContext.prototype.constructor = ArrowFunctionParametersContext;

ArrowFunctionParametersContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ArrowFunctionParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

ArrowFunctionParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterArrowFunctionParameters(this);
	}
};

ArrowFunctionParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitArrowFunctionParameters(this);
	}
};

ArrowFunctionParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrowFunctionParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext;

JavaScriptParser.prototype.arrowFunctionParameters = function() {

    var localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, JavaScriptParser.RULE_arrowFunctionParameters);
    var _la = 0; // Token type
    try {
        this.state = 736;
        switch(this._input.LA(1)) {
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 730;
            this.match(JavaScriptParser.Identifier);
            break;
        case JavaScriptParser.OpenParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 731;
            this.match(JavaScriptParser.OpenParen);
            this.state = 733;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 732;
                this.formalParameterList();
            }

            this.state = 735;
            this.match(JavaScriptParser.CloseParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrowFunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
    return this;
}

ArrowFunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionBodyContext.prototype.constructor = ArrowFunctionBodyContext;

ArrowFunctionBodyContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArrowFunctionBodyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ArrowFunctionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterArrowFunctionBody(this);
	}
};

ArrowFunctionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitArrowFunctionBody(this);
	}
};

ArrowFunctionBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrowFunctionBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext;

JavaScriptParser.prototype.arrowFunctionBody = function() {

    var localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, JavaScriptParser.RULE_arrowFunctionBody);
    try {
        this.state = 743;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 738;
            this.singleExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 739;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 740;
            this.functionBody();
            this.state = 741;
            this.match(JavaScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;


AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAssignmentOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;

JavaScriptParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, JavaScriptParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 745;
        _la = this._input.LA(1);
        if(!(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (JavaScriptParser.MultiplyAssign - 42)) | (1 << (JavaScriptParser.DivideAssign - 42)) | (1 << (JavaScriptParser.ModulusAssign - 42)) | (1 << (JavaScriptParser.PlusAssign - 42)) | (1 << (JavaScriptParser.MinusAssign - 42)) | (1 << (JavaScriptParser.LeftShiftArithmeticAssign - 42)) | (1 << (JavaScriptParser.RightShiftArithmeticAssign - 42)) | (1 << (JavaScriptParser.RightShiftLogicalAssign - 42)) | (1 << (JavaScriptParser.BitAndAssign - 42)) | (1 << (JavaScriptParser.BitXorAssign - 42)) | (1 << (JavaScriptParser.BitOrAssign - 42)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
};

LiteralContext.prototype.TemplateStringLiteral = function() {
    return this.getToken(JavaScriptParser.TemplateStringLiteral, 0);
};

LiteralContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(JavaScriptParser.RegularExpressionLiteral, 0);
};

LiteralContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.LiteralContext = LiteralContext;

JavaScriptParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, JavaScriptParser.RULE_literal);
    try {
        this.state = 753;
        switch(this._input.LA(1)) {
        case JavaScriptParser.NullLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 747;
            this.match(JavaScriptParser.NullLiteral);
            break;
        case JavaScriptParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 748;
            this.match(JavaScriptParser.BooleanLiteral);
            break;
        case JavaScriptParser.StringLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 749;
            this.match(JavaScriptParser.StringLiteral);
            break;
        case JavaScriptParser.TemplateStringLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 750;
            this.match(JavaScriptParser.TemplateStringLiteral);
            break;
        case JavaScriptParser.RegularExpressionLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 751;
            this.match(JavaScriptParser.RegularExpressionLiteral);
            break;
        case JavaScriptParser.DecimalLiteral:
        case JavaScriptParser.HexIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral2:
        case JavaScriptParser.BinaryIntegerLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 752;
            this.numericLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
    return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.DecimalLiteral = function() {
    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
};

NumericLiteralContext.prototype.HexIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral2 = function() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
};

NumericLiteralContext.prototype.BinaryIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
};

NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitNumericLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.NumericLiteralContext = NumericLiteralContext;

JavaScriptParser.prototype.numericLiteral = function() {

    var localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, JavaScriptParser.RULE_numericLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 755;
        _la = this._input.LA(1);
        if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (JavaScriptParser.DecimalLiteral - 56)) | (1 << (JavaScriptParser.HexIntegerLiteral - 56)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 56)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 56)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 56)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_identifierName;
    return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

IdentifierNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterIdentifierName(this);
	}
};

IdentifierNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitIdentifierName(this);
	}
};

IdentifierNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitIdentifierName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.IdentifierNameContext = IdentifierNameContext;

JavaScriptParser.prototype.identifierName = function() {

    var localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, JavaScriptParser.RULE_identifierName);
    try {
        this.state = 759;
        switch(this._input.LA(1)) {
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 757;
            this.match(JavaScriptParser.Identifier);
            break;
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Implements:
        case JavaScriptParser.Let:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 758;
            this.reservedWord();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

ReservedWordContext.prototype.NullLiteral = function() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterReservedWord(this);
	}
};

ReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitReservedWord(this);
	}
};

ReservedWordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitReservedWord(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ReservedWordContext = ReservedWordContext;

JavaScriptParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, JavaScriptParser.RULE_reservedWord);
    try {
        this.state = 764;
        switch(this._input.LA(1)) {
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Implements:
        case JavaScriptParser.Let:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
            this.enterOuterAlt(localctx, 1);
            this.state = 761;
            this.keyword();
            break;
        case JavaScriptParser.NullLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 762;
            this.match(JavaScriptParser.NullLiteral);
            break;
        case JavaScriptParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 763;
            this.match(JavaScriptParser.BooleanLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Break = function() {
    return this.getToken(JavaScriptParser.Break, 0);
};

KeywordContext.prototype.Do = function() {
    return this.getToken(JavaScriptParser.Do, 0);
};

KeywordContext.prototype.Instanceof = function() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
};

KeywordContext.prototype.Typeof = function() {
    return this.getToken(JavaScriptParser.Typeof, 0);
};

KeywordContext.prototype.Case = function() {
    return this.getToken(JavaScriptParser.Case, 0);
};

KeywordContext.prototype.Else = function() {
    return this.getToken(JavaScriptParser.Else, 0);
};

KeywordContext.prototype.New = function() {
    return this.getToken(JavaScriptParser.New, 0);
};

KeywordContext.prototype.Var = function() {
    return this.getToken(JavaScriptParser.Var, 0);
};

KeywordContext.prototype.Catch = function() {
    return this.getToken(JavaScriptParser.Catch, 0);
};

KeywordContext.prototype.Finally = function() {
    return this.getToken(JavaScriptParser.Finally, 0);
};

KeywordContext.prototype.Return = function() {
    return this.getToken(JavaScriptParser.Return, 0);
};

KeywordContext.prototype.Void = function() {
    return this.getToken(JavaScriptParser.Void, 0);
};

KeywordContext.prototype.Continue = function() {
    return this.getToken(JavaScriptParser.Continue, 0);
};

KeywordContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

KeywordContext.prototype.Switch = function() {
    return this.getToken(JavaScriptParser.Switch, 0);
};

KeywordContext.prototype.While = function() {
    return this.getToken(JavaScriptParser.While, 0);
};

KeywordContext.prototype.Debugger = function() {
    return this.getToken(JavaScriptParser.Debugger, 0);
};

KeywordContext.prototype.Function = function() {
    return this.getToken(JavaScriptParser.Function, 0);
};

KeywordContext.prototype.This = function() {
    return this.getToken(JavaScriptParser.This, 0);
};

KeywordContext.prototype.With = function() {
    return this.getToken(JavaScriptParser.With, 0);
};

KeywordContext.prototype.Default = function() {
    return this.getToken(JavaScriptParser.Default, 0);
};

KeywordContext.prototype.If = function() {
    return this.getToken(JavaScriptParser.If, 0);
};

KeywordContext.prototype.Throw = function() {
    return this.getToken(JavaScriptParser.Throw, 0);
};

KeywordContext.prototype.Delete = function() {
    return this.getToken(JavaScriptParser.Delete, 0);
};

KeywordContext.prototype.In = function() {
    return this.getToken(JavaScriptParser.In, 0);
};

KeywordContext.prototype.Try = function() {
    return this.getToken(JavaScriptParser.Try, 0);
};

KeywordContext.prototype.Class = function() {
    return this.getToken(JavaScriptParser.Class, 0);
};

KeywordContext.prototype.Enum = function() {
    return this.getToken(JavaScriptParser.Enum, 0);
};

KeywordContext.prototype.Extends = function() {
    return this.getToken(JavaScriptParser.Extends, 0);
};

KeywordContext.prototype.Super = function() {
    return this.getToken(JavaScriptParser.Super, 0);
};

KeywordContext.prototype.Const = function() {
    return this.getToken(JavaScriptParser.Const, 0);
};

KeywordContext.prototype.Export = function() {
    return this.getToken(JavaScriptParser.Export, 0);
};

KeywordContext.prototype.Import = function() {
    return this.getToken(JavaScriptParser.Import, 0);
};

KeywordContext.prototype.Implements = function() {
    return this.getToken(JavaScriptParser.Implements, 0);
};

KeywordContext.prototype.Let = function() {
    return this.getToken(JavaScriptParser.Let, 0);
};

KeywordContext.prototype.Private = function() {
    return this.getToken(JavaScriptParser.Private, 0);
};

KeywordContext.prototype.Public = function() {
    return this.getToken(JavaScriptParser.Public, 0);
};

KeywordContext.prototype.Interface = function() {
    return this.getToken(JavaScriptParser.Interface, 0);
};

KeywordContext.prototype.Package = function() {
    return this.getToken(JavaScriptParser.Package, 0);
};

KeywordContext.prototype.Protected = function() {
    return this.getToken(JavaScriptParser.Protected, 0);
};

KeywordContext.prototype.Static = function() {
    return this.getToken(JavaScriptParser.Static, 0);
};

KeywordContext.prototype.Yield = function() {
    return this.getToken(JavaScriptParser.Yield, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitKeyword(this);
	}
};

KeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.KeywordContext = KeywordContext;

JavaScriptParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, JavaScriptParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 766;
        _la = this._input.LA(1);
        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (JavaScriptParser.Break - 61)) | (1 << (JavaScriptParser.Do - 61)) | (1 << (JavaScriptParser.Instanceof - 61)) | (1 << (JavaScriptParser.Typeof - 61)) | (1 << (JavaScriptParser.Case - 61)) | (1 << (JavaScriptParser.Else - 61)) | (1 << (JavaScriptParser.New - 61)) | (1 << (JavaScriptParser.Var - 61)) | (1 << (JavaScriptParser.Catch - 61)) | (1 << (JavaScriptParser.Finally - 61)) | (1 << (JavaScriptParser.Return - 61)) | (1 << (JavaScriptParser.Void - 61)) | (1 << (JavaScriptParser.Continue - 61)) | (1 << (JavaScriptParser.For - 61)) | (1 << (JavaScriptParser.Switch - 61)) | (1 << (JavaScriptParser.While - 61)) | (1 << (JavaScriptParser.Debugger - 61)) | (1 << (JavaScriptParser.Function - 61)) | (1 << (JavaScriptParser.This - 61)) | (1 << (JavaScriptParser.With - 61)) | (1 << (JavaScriptParser.Default - 61)) | (1 << (JavaScriptParser.If - 61)) | (1 << (JavaScriptParser.Throw - 61)) | (1 << (JavaScriptParser.Delete - 61)) | (1 << (JavaScriptParser.In - 61)) | (1 << (JavaScriptParser.Try - 61)) | (1 << (JavaScriptParser.Class - 61)) | (1 << (JavaScriptParser.Enum - 61)) | (1 << (JavaScriptParser.Extends - 61)) | (1 << (JavaScriptParser.Super - 61)) | (1 << (JavaScriptParser.Const - 61)) | (1 << (JavaScriptParser.Export - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Implements - 93)) | (1 << (JavaScriptParser.Let - 93)) | (1 << (JavaScriptParser.Private - 93)) | (1 << (JavaScriptParser.Public - 93)) | (1 << (JavaScriptParser.Interface - 93)) | (1 << (JavaScriptParser.Package - 93)) | (1 << (JavaScriptParser.Protected - 93)) | (1 << (JavaScriptParser.Static - 93)) | (1 << (JavaScriptParser.Yield - 93)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

GetterContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitGetter(this);
	}
};

GetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.GetterContext = GetterContext;

JavaScriptParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, JavaScriptParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 768;
        this.match(JavaScriptParser.Identifier);
        this.state = 769;
        if (!( this.p("get"))) {
            throw new antlr4.error.FailedPredicateException(this, "this.p(\"get\")");
        }
        this.state = 770;
        this.propertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

SetterContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitSetter(this);
	}
};

SetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.SetterContext = SetterContext;

JavaScriptParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, JavaScriptParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 772;
        this.match(JavaScriptParser.Identifier);
        this.state = 773;
        if (!( this.p("set"))) {
            throw new antlr4.error.FailedPredicateException(this, "this.p(\"set\")");
        }
        this.state = 774;
        this.propertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_eos;
    return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
};

EosContext.prototype.EOF = function() {
    return this.getToken(JavaScriptParser.EOF, 0);
};

EosContext.prototype.enterRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.enterEos(this);
	}
};

EosContext.prototype.exitRule = function(listener) {
    if(listener instanceof JavaScriptParserListener ) {
        listener.exitEos(this);
	}
};

EosContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitEos(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.EosContext = EosContext;

JavaScriptParser.prototype.eos = function() {

    var localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, JavaScriptParser.RULE_eos);
    try {
        this.state = 780;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 776;
            this.match(JavaScriptParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 777;
            this.match(JavaScriptParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 778;
            if (!( this.lineTerminatorAhead())) {
                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 779;
            if (!( this.closeBrace())) {
                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


JavaScriptParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 10:
			return this.expressionStatement_sempred(localctx, predIndex);
	case 12:
			return this.iterationStatement_sempred(localctx, predIndex);
	case 14:
			return this.continueStatement_sempred(localctx, predIndex);
	case 15:
			return this.breakStatement_sempred(localctx, predIndex);
	case 16:
			return this.returnStatement_sempred(localctx, predIndex);
	case 24:
			return this.throwStatement_sempred(localctx, predIndex);
	case 32:
			return this.classElement_sempred(localctx, predIndex);
	case 49:
			return this.singleExpression_sempred(localctx, predIndex);
	case 58:
			return this.getter_sempred(localctx, predIndex);
	case 59:
			return this.setter_sempred(localctx, predIndex);
	case 60:
			return this.eos_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

JavaScriptParser.prototype.expressionStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.notOpenBraceAndNotFunction();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.iterationStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.p("of");
		case 2:
			return this.p("of");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.continueStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.breakStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.returnStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.throwStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.classElement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return n("static");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.singleExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 24);
		case 9:
			return this.precpred(this._ctx, 23);
		case 10:
			return this.precpred(this._ctx, 22);
		case 11:
			return this.precpred(this._ctx, 21);
		case 12:
			return this.precpred(this._ctx, 20);
		case 13:
			return this.precpred(this._ctx, 19);
		case 14:
			return this.precpred(this._ctx, 18);
		case 15:
			return this.precpred(this._ctx, 17);
		case 16:
			return this.precpred(this._ctx, 16);
		case 17:
			return this.precpred(this._ctx, 15);
		case 18:
			return this.precpred(this._ctx, 14);
		case 19:
			return this.precpred(this._ctx, 13);
		case 20:
			return this.precpred(this._ctx, 12);
		case 21:
			return this.precpred(this._ctx, 11);
		case 22:
			return this.precpred(this._ctx, 10);
		case 23:
			return this.precpred(this._ctx, 39);
		case 24:
			return this.precpred(this._ctx, 38);
		case 25:
			return this.precpred(this._ctx, 37);
		case 26:
			return this.precpred(this._ctx, 35);
		case 27:
			return this.notLineTerminator();
		case 28:
			return this.precpred(this._ctx, 34);
		case 29:
			return this.notLineTerminator();
		case 30:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.getter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 31:
			return this.p("get");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.setter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return this.p("set");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.eos_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.lineTerminatorAhead();
		case 34:
			return this.closeBrace();
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.JavaScriptParser = JavaScriptParser;
